{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { trackPointerMove, getRelativePoint, getDataUrl as getDataUrl$1, query, dataAttr, isLeftClick, isModifierKey, getEventTarget } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport getStroke from 'perfect-freehand';\nimport { createProps } from '@zag-js/types';\nimport { createSplitProps } from '@zag-js/utils';\n\n// src/signature-pad.anatomy.ts\nvar anatomy = createAnatomy(\"signature-pad\").parts(\"root\", \"control\", \"segment\", \"segmentPath\", \"guide\", \"clearTrigger\", \"label\");\nvar parts = anatomy.build();\nvar getRootId = ctx => ctx.ids?.root ?? `signature-${ctx.id}`;\nvar getControlId = ctx => ctx.ids?.control ?? `signature-control-${ctx.id}`;\nvar getLabelId = ctx => ctx.ids?.label ?? `signature-label-${ctx.id}`;\nvar getHiddenInputId = ctx => ctx.ids?.hiddenInput ?? `signature-input-${ctx.id}`;\nvar getControlEl = ctx => ctx.getById(getControlId(ctx));\nvar getSegmentEl = ctx => query(getControlEl(ctx), \"[data-part=segment]\");\nvar getDataUrl = (ctx, options) => {\n  return getDataUrl$1(getSegmentEl(ctx), options);\n};\n\n// src/signature-pad.connect.ts\nfunction connect(service, normalize) {\n  const {\n    state,\n    send,\n    prop,\n    computed,\n    context,\n    scope\n  } = service;\n  const drawing = state.matches(\"drawing\");\n  const empty = computed(\"isEmpty\");\n  const interactive = computed(\"isInteractive\");\n  const disabled = prop(\"disabled\");\n  const translations = prop(\"translations\");\n  return {\n    empty,\n    drawing,\n    currentPath: context.get(\"currentPath\"),\n    paths: context.get(\"paths\"),\n    clear() {\n      send({\n        type: \"CLEAR\"\n      });\n    },\n    getDataUrl(type, quality) {\n      if (computed(\"isEmpty\")) return Promise.resolve(\"\");\n      return getDataUrl(scope, {\n        type,\n        quality\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        id: getLabelId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        htmlFor: getHiddenInputId(scope),\n        onClick(event) {\n          if (!interactive) return;\n          if (event.defaultPrevented) return;\n          const controlEl = getControlEl(scope);\n          controlEl?.focus({\n            preventScroll: true\n          });\n        }\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        \"data-disabled\": dataAttr(disabled),\n        id: getRootId(scope)\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        tabIndex: disabled ? void 0 : 0,\n        id: getControlId(scope),\n        role: \"application\",\n        \"aria-roledescription\": \"signature pad\",\n        \"aria-label\": translations.control,\n        \"aria-disabled\": disabled,\n        \"data-disabled\": dataAttr(disabled),\n        onPointerDown(event) {\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          if (!interactive) return;\n          const target = getEventTarget(event);\n          if (target?.closest(\"[data-part=clear-trigger]\")) return;\n          event.currentTarget.setPointerCapture(event.pointerId);\n          const point = {\n            x: event.clientX,\n            y: event.clientY\n          };\n          const controlEl = getControlEl(scope);\n          if (!controlEl) return;\n          const {\n            offset\n          } = getRelativePoint(point, controlEl);\n          send({\n            type: \"POINTER_DOWN\",\n            point: offset,\n            pressure: event.pressure\n          });\n        },\n        onPointerUp(event) {\n          if (!interactive) return;\n          if (event.currentTarget.hasPointerCapture(event.pointerId)) {\n            event.currentTarget.releasePointerCapture(event.pointerId);\n          }\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\"\n        }\n      });\n    },\n    getSegmentProps() {\n      return normalize.svg({\n        ...parts.segment.attrs,\n        style: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\",\n          pointerEvents: \"none\",\n          fill: prop(\"drawing\").fill\n        }\n      });\n    },\n    getSegmentPathProps(props2) {\n      return normalize.path({\n        ...parts.segmentPath.attrs,\n        d: props2.path\n      });\n    },\n    getGuideProps() {\n      return normalize.element({\n        ...parts.guide.attrs,\n        \"data-disabled\": dataAttr(disabled)\n      });\n    },\n    getClearTriggerProps() {\n      return normalize.button({\n        ...parts.clearTrigger.attrs,\n        type: \"button\",\n        \"aria-label\": translations.clearTrigger,\n        hidden: !context.get(\"paths\").length || drawing,\n        disabled,\n        onClick() {\n          send({\n            type: \"CLEAR\"\n          });\n        }\n      });\n    },\n    getHiddenInputProps(props2) {\n      return normalize.input({\n        id: getHiddenInputId(scope),\n        type: \"text\",\n        hidden: true,\n        disabled,\n        required: prop(\"required\"),\n        readOnly: true,\n        name: prop(\"name\"),\n        value: props2.value\n      });\n    }\n  };\n}\n\n// src/get-svg-path.ts\nvar average = (a, b) => (a + b) / 2;\nfunction getSvgPathFromStroke(points, closed = true) {\n  const len = points.length;\n  if (len < 4) {\n    return \"\";\n  }\n  let a = points[0];\n  let b = points[1];\n  const c = points[2];\n  let result = `M${a[0].toFixed(2)},${a[1].toFixed(2)} Q${b[0].toFixed(2)},${b[1].toFixed(2)} ${average(b[0], c[0]).toFixed(2)},${average(b[1], c[1]).toFixed(2)} T`;\n  for (let i = 2, max = len - 1; i < max; i++) {\n    a = points[i];\n    b = points[i + 1];\n    result += `${average(a[0], b[0]).toFixed(2)},${average(a[1], b[1]).toFixed(2)} `;\n  }\n  if (closed) {\n    result += \"Z\";\n  }\n  return result;\n}\n\n// src/signature-pad.machine.ts\nvar machine = createMachine({\n  props({\n    props: props2\n  }) {\n    return {\n      ...props2,\n      drawing: {\n        size: 2,\n        simulatePressure: false,\n        thinning: 0.7,\n        smoothing: 0.4,\n        streamline: 0.6,\n        ...props2.drawing\n      },\n      translations: {\n        control: \"signature pad\",\n        clearTrigger: \"clear signature\",\n        ...props2.translations\n      }\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context({\n    prop,\n    bindable\n  }) {\n    return {\n      paths: bindable(() => ({\n        defaultValue: [],\n        sync: true,\n        onChange(value) {\n          prop(\"onDraw\")?.({\n            paths: value\n          });\n        }\n      })),\n      currentPoints: bindable(() => ({\n        defaultValue: []\n      })),\n      currentPath: bindable(() => ({\n        defaultValue: null\n      }))\n    };\n  },\n  computed: {\n    isInteractive: ({\n      prop\n    }) => !(prop(\"disabled\") || prop(\"readOnly\")),\n    isEmpty: ({\n      context\n    }) => context.get(\"paths\").length === 0\n  },\n  on: {\n    CLEAR: {\n      actions: [\"clearPoints\", \"invokeOnDrawEnd\", \"focusCanvasEl\"]\n    }\n  },\n  states: {\n    idle: {\n      on: {\n        POINTER_DOWN: {\n          target: \"drawing\",\n          actions: [\"addPoint\"]\n        }\n      }\n    },\n    drawing: {\n      effects: [\"trackPointerMove\"],\n      on: {\n        POINTER_MOVE: {\n          actions: [\"addPoint\", \"invokeOnDraw\"]\n        },\n        POINTER_UP: {\n          target: \"idle\",\n          actions: [\"endStroke\", \"invokeOnDrawEnd\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    effects: {\n      trackPointerMove({\n        scope,\n        send\n      }) {\n        const doc = scope.getDoc();\n        return trackPointerMove(doc, {\n          onPointerMove({\n            event,\n            point\n          }) {\n            const controlEl = getControlEl(scope);\n            if (!controlEl) return;\n            const {\n              offset\n            } = getRelativePoint(point, controlEl);\n            send({\n              type: \"POINTER_MOVE\",\n              point: offset,\n              pressure: event.pressure\n            });\n          },\n          onPointerUp() {\n            send({\n              type: \"POINTER_UP\"\n            });\n          }\n        });\n      }\n    },\n    actions: {\n      addPoint({\n        context,\n        event,\n        prop\n      }) {\n        const nextPoints = [...context.get(\"currentPoints\"), event.point];\n        context.set(\"currentPoints\", nextPoints);\n        const stroke = getStroke(nextPoints, prop(\"drawing\"));\n        context.set(\"currentPath\", getSvgPathFromStroke(stroke));\n      },\n      endStroke({\n        context\n      }) {\n        context.set(\"paths\", [...context.get(\"paths\"), context.get(\"currentPath\")]);\n        context.set(\"currentPoints\", []);\n        context.set(\"currentPath\", null);\n      },\n      clearPoints({\n        context\n      }) {\n        context.set(\"currentPoints\", []);\n        context.set(\"paths\", []);\n      },\n      focusCanvasEl({\n        scope\n      }) {\n        queueMicrotask(() => {\n          scope.getActiveElement()?.focus({\n            preventScroll: true\n          });\n        });\n      },\n      invokeOnDraw({\n        context,\n        prop\n      }) {\n        prop(\"onDraw\")?.({\n          paths: [...context.get(\"paths\"), context.get(\"currentPath\")]\n        });\n      },\n      invokeOnDrawEnd({\n        context,\n        prop,\n        scope,\n        computed\n      }) {\n        prop(\"onDrawEnd\")?.({\n          paths: [...context.get(\"paths\")],\n          getDataUrl(type, quality = 0.92) {\n            if (computed(\"isEmpty\")) return Promise.resolve(\"\");\n            return getDataUrl(scope, {\n              type,\n              quality\n            });\n          }\n        });\n      }\n    }\n  }\n});\nvar props = createProps()([\"dir\", \"disabled\", \"drawing\", \"getRootNode\", \"id\", \"ids\", \"name\", \"onDraw\", \"onDrawEnd\", \"readOnly\", \"required\", \"translations\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":{"version":3,"names":["createAnatomy","trackPointerMove","getRelativePoint","getDataUrl","getDataUrl$1","query","dataAttr","isLeftClick","isModifierKey","getEventTarget","createMachine","getStroke","createProps","createSplitProps","anatomy","parts","build","getRootId","ctx","ids","root","id","getControlId","control","getLabelId","label","getHiddenInputId","hiddenInput","getControlEl","getById","getSegmentEl","options","connect","service","normalize","state","send","prop","computed","context","scope","drawing","matches","empty","interactive","disabled","translations","currentPath","get","paths","clear","type","quality","Promise","resolve","getLabelProps","attrs","htmlFor","onClick","event","defaultPrevented","controlEl","focus","preventScroll","getRootProps","element","getControlProps","tabIndex","role","onPointerDown","target","closest","currentTarget","setPointerCapture","pointerId","point","x","clientX","y","clientY","offset","pressure","onPointerUp","hasPointerCapture","releasePointerCapture","style","position","touchAction","userSelect","WebkitUserSelect","getSegmentProps","svg","segment","top","left","width","height","pointerEvents","fill","getSegmentPathProps","props2","path","segmentPath","d","getGuideProps","guide","getClearTriggerProps","button","clearTrigger","hidden","length","getHiddenInputProps","input","required","readOnly","name","value","average","a","b","getSvgPathFromStroke","points","closed","len","c","result","toFixed","i","max","machine","props","size","simulatePressure","thinning","smoothing","streamline","initialState","bindable","defaultValue","sync","onChange","currentPoints","isInteractive","isEmpty","on","CLEAR","actions","states","idle","POINTER_DOWN","effects","POINTER_MOVE","POINTER_UP","implementations","doc","getDoc","onPointerMove","addPoint","nextPoints","set","stroke","endStroke","clearPoints","focusCanvasEl","queueMicrotask","getActiveElement","invokeOnDraw","invokeOnDrawEnd","splitProps"],"sources":["C:/Users/tuanl/weekly-todo-frontend/node_modules/@chakra-ui/react/node_modules/@zag-js/signature-pad/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\nimport { trackPointerMove, getRelativePoint, getDataUrl as getDataUrl$1, query, dataAttr, isLeftClick, isModifierKey, getEventTarget } from '@zag-js/dom-query';\nimport { createMachine } from '@zag-js/core';\nimport getStroke from 'perfect-freehand';\nimport { createProps } from '@zag-js/types';\nimport { createSplitProps } from '@zag-js/utils';\n\n// src/signature-pad.anatomy.ts\nvar anatomy = createAnatomy(\"signature-pad\").parts(\n  \"root\",\n  \"control\",\n  \"segment\",\n  \"segmentPath\",\n  \"guide\",\n  \"clearTrigger\",\n  \"label\"\n);\nvar parts = anatomy.build();\nvar getRootId = (ctx) => ctx.ids?.root ?? `signature-${ctx.id}`;\nvar getControlId = (ctx) => ctx.ids?.control ?? `signature-control-${ctx.id}`;\nvar getLabelId = (ctx) => ctx.ids?.label ?? `signature-label-${ctx.id}`;\nvar getHiddenInputId = (ctx) => ctx.ids?.hiddenInput ?? `signature-input-${ctx.id}`;\nvar getControlEl = (ctx) => ctx.getById(getControlId(ctx));\nvar getSegmentEl = (ctx) => query(getControlEl(ctx), \"[data-part=segment]\");\nvar getDataUrl = (ctx, options) => {\n  return getDataUrl$1(getSegmentEl(ctx), options);\n};\n\n// src/signature-pad.connect.ts\nfunction connect(service, normalize) {\n  const { state, send, prop, computed, context, scope } = service;\n  const drawing = state.matches(\"drawing\");\n  const empty = computed(\"isEmpty\");\n  const interactive = computed(\"isInteractive\");\n  const disabled = prop(\"disabled\");\n  const translations = prop(\"translations\");\n  return {\n    empty,\n    drawing,\n    currentPath: context.get(\"currentPath\"),\n    paths: context.get(\"paths\"),\n    clear() {\n      send({ type: \"CLEAR\" });\n    },\n    getDataUrl(type, quality) {\n      if (computed(\"isEmpty\")) return Promise.resolve(\"\");\n      return getDataUrl(scope, { type, quality });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        id: getLabelId(scope),\n        \"data-disabled\": dataAttr(disabled),\n        htmlFor: getHiddenInputId(scope),\n        onClick(event) {\n          if (!interactive) return;\n          if (event.defaultPrevented) return;\n          const controlEl = getControlEl(scope);\n          controlEl?.focus({ preventScroll: true });\n        }\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        \"data-disabled\": dataAttr(disabled),\n        id: getRootId(scope)\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        tabIndex: disabled ? void 0 : 0,\n        id: getControlId(scope),\n        role: \"application\",\n        \"aria-roledescription\": \"signature pad\",\n        \"aria-label\": translations.control,\n        \"aria-disabled\": disabled,\n        \"data-disabled\": dataAttr(disabled),\n        onPointerDown(event) {\n          if (!isLeftClick(event)) return;\n          if (isModifierKey(event)) return;\n          if (!interactive) return;\n          const target = getEventTarget(event);\n          if (target?.closest(\"[data-part=clear-trigger]\")) return;\n          event.currentTarget.setPointerCapture(event.pointerId);\n          const point = { x: event.clientX, y: event.clientY };\n          const controlEl = getControlEl(scope);\n          if (!controlEl) return;\n          const { offset } = getRelativePoint(point, controlEl);\n          send({ type: \"POINTER_DOWN\", point: offset, pressure: event.pressure });\n        },\n        onPointerUp(event) {\n          if (!interactive) return;\n          if (event.currentTarget.hasPointerCapture(event.pointerId)) {\n            event.currentTarget.releasePointerCapture(event.pointerId);\n          }\n        },\n        style: {\n          position: \"relative\",\n          touchAction: \"none\",\n          userSelect: \"none\",\n          WebkitUserSelect: \"none\"\n        }\n      });\n    },\n    getSegmentProps() {\n      return normalize.svg({\n        ...parts.segment.attrs,\n        style: {\n          position: \"absolute\",\n          top: 0,\n          left: 0,\n          width: \"100%\",\n          height: \"100%\",\n          pointerEvents: \"none\",\n          fill: prop(\"drawing\").fill\n        }\n      });\n    },\n    getSegmentPathProps(props2) {\n      return normalize.path({\n        ...parts.segmentPath.attrs,\n        d: props2.path\n      });\n    },\n    getGuideProps() {\n      return normalize.element({\n        ...parts.guide.attrs,\n        \"data-disabled\": dataAttr(disabled)\n      });\n    },\n    getClearTriggerProps() {\n      return normalize.button({\n        ...parts.clearTrigger.attrs,\n        type: \"button\",\n        \"aria-label\": translations.clearTrigger,\n        hidden: !context.get(\"paths\").length || drawing,\n        disabled,\n        onClick() {\n          send({ type: \"CLEAR\" });\n        }\n      });\n    },\n    getHiddenInputProps(props2) {\n      return normalize.input({\n        id: getHiddenInputId(scope),\n        type: \"text\",\n        hidden: true,\n        disabled,\n        required: prop(\"required\"),\n        readOnly: true,\n        name: prop(\"name\"),\n        value: props2.value\n      });\n    }\n  };\n}\n\n// src/get-svg-path.ts\nvar average = (a, b) => (a + b) / 2;\nfunction getSvgPathFromStroke(points, closed = true) {\n  const len = points.length;\n  if (len < 4) {\n    return \"\";\n  }\n  let a = points[0];\n  let b = points[1];\n  const c = points[2];\n  let result = `M${a[0].toFixed(2)},${a[1].toFixed(2)} Q${b[0].toFixed(2)},${b[1].toFixed(2)} ${average(b[0], c[0]).toFixed(2)},${average(\n    b[1],\n    c[1]\n  ).toFixed(2)} T`;\n  for (let i = 2, max = len - 1; i < max; i++) {\n    a = points[i];\n    b = points[i + 1];\n    result += `${average(a[0], b[0]).toFixed(2)},${average(a[1], b[1]).toFixed(2)} `;\n  }\n  if (closed) {\n    result += \"Z\";\n  }\n  return result;\n}\n\n// src/signature-pad.machine.ts\nvar machine = createMachine({\n  props({ props: props2 }) {\n    return {\n      ...props2,\n      drawing: {\n        size: 2,\n        simulatePressure: false,\n        thinning: 0.7,\n        smoothing: 0.4,\n        streamline: 0.6,\n        ...props2.drawing\n      },\n      translations: {\n        control: \"signature pad\",\n        clearTrigger: \"clear signature\",\n        ...props2.translations\n      }\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context({ prop, bindable }) {\n    return {\n      paths: bindable(() => ({\n        defaultValue: [],\n        sync: true,\n        onChange(value) {\n          prop(\"onDraw\")?.({ paths: value });\n        }\n      })),\n      currentPoints: bindable(() => ({\n        defaultValue: []\n      })),\n      currentPath: bindable(() => ({\n        defaultValue: null\n      }))\n    };\n  },\n  computed: {\n    isInteractive: ({ prop }) => !(prop(\"disabled\") || prop(\"readOnly\")),\n    isEmpty: ({ context }) => context.get(\"paths\").length === 0\n  },\n  on: {\n    CLEAR: {\n      actions: [\"clearPoints\", \"invokeOnDrawEnd\", \"focusCanvasEl\"]\n    }\n  },\n  states: {\n    idle: {\n      on: {\n        POINTER_DOWN: {\n          target: \"drawing\",\n          actions: [\"addPoint\"]\n        }\n      }\n    },\n    drawing: {\n      effects: [\"trackPointerMove\"],\n      on: {\n        POINTER_MOVE: {\n          actions: [\"addPoint\", \"invokeOnDraw\"]\n        },\n        POINTER_UP: {\n          target: \"idle\",\n          actions: [\"endStroke\", \"invokeOnDrawEnd\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    effects: {\n      trackPointerMove({ scope, send }) {\n        const doc = scope.getDoc();\n        return trackPointerMove(doc, {\n          onPointerMove({ event, point }) {\n            const controlEl = getControlEl(scope);\n            if (!controlEl) return;\n            const { offset } = getRelativePoint(point, controlEl);\n            send({ type: \"POINTER_MOVE\", point: offset, pressure: event.pressure });\n          },\n          onPointerUp() {\n            send({ type: \"POINTER_UP\" });\n          }\n        });\n      }\n    },\n    actions: {\n      addPoint({ context, event, prop }) {\n        const nextPoints = [...context.get(\"currentPoints\"), event.point];\n        context.set(\"currentPoints\", nextPoints);\n        const stroke = getStroke(nextPoints, prop(\"drawing\"));\n        context.set(\"currentPath\", getSvgPathFromStroke(stroke));\n      },\n      endStroke({ context }) {\n        context.set(\"paths\", [...context.get(\"paths\"), context.get(\"currentPath\")]);\n        context.set(\"currentPoints\", []);\n        context.set(\"currentPath\", null);\n      },\n      clearPoints({ context }) {\n        context.set(\"currentPoints\", []);\n        context.set(\"paths\", []);\n      },\n      focusCanvasEl({ scope }) {\n        queueMicrotask(() => {\n          scope.getActiveElement()?.focus({ preventScroll: true });\n        });\n      },\n      invokeOnDraw({ context, prop }) {\n        prop(\"onDraw\")?.({\n          paths: [...context.get(\"paths\"), context.get(\"currentPath\")]\n        });\n      },\n      invokeOnDrawEnd({ context, prop, scope, computed }) {\n        prop(\"onDrawEnd\")?.({\n          paths: [...context.get(\"paths\")],\n          getDataUrl(type, quality = 0.92) {\n            if (computed(\"isEmpty\")) return Promise.resolve(\"\");\n            return getDataUrl(scope, { type, quality });\n          }\n        });\n      }\n    }\n  }\n});\nvar props = createProps()([\n  \"dir\",\n  \"disabled\",\n  \"drawing\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"name\",\n  \"onDraw\",\n  \"onDrawEnd\",\n  \"readOnly\",\n  \"required\",\n  \"translations\"\n]);\nvar splitProps = createSplitProps(props);\n\nexport { anatomy, connect, machine, props, splitProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}