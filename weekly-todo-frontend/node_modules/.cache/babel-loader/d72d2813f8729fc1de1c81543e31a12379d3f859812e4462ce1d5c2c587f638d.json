{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { raf, dispatchInputValueEvent, queryAll, dataAttr, ariaAttr, isHTMLElement, isComposingEvent, isModifierKey, getEventKey, getNativeEvent, getBeforeInputValue, visuallyHiddenStyle } from '@zag-js/dom-query';\nimport { setValueAtIndex, isEqual, createSplitProps, invariant } from '@zag-js/utils';\nimport { setup } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\n\n// src/pin-input.anatomy.ts\nvar anatomy = createAnatomy(\"pinInput\").parts(\"root\", \"label\", \"input\", \"control\");\nvar parts = anatomy.build();\nvar getRootId = ctx => ctx.ids?.root ?? `pin-input:${ctx.id}`;\nvar getInputId = (ctx, id) => ctx.ids?.input?.(id) ?? `pin-input:${ctx.id}:${id}`;\nvar getHiddenInputId = ctx => ctx.ids?.hiddenInput ?? `pin-input:${ctx.id}:hidden`;\nvar getLabelId = ctx => ctx.ids?.label ?? `pin-input:${ctx.id}:label`;\nvar getControlId = ctx => ctx.ids?.control ?? `pin-input:${ctx.id}:control`;\nvar getRootEl = ctx => ctx.getById(getRootId(ctx));\nvar getInputEls = ctx => {\n  const ownerId = CSS.escape(getRootId(ctx));\n  const selector = `input[data-ownedby=${ownerId}]`;\n  return queryAll(getRootEl(ctx), selector);\n};\nvar getInputElAtIndex = (ctx, index) => getInputEls(ctx)[index];\nvar getFirstInputEl = ctx => getInputEls(ctx)[0];\nvar getHiddenInputEl = ctx => ctx.getById(getHiddenInputId(ctx));\nvar setInputValue = (inputEl, value) => {\n  inputEl.value = value;\n  inputEl.setAttribute(\"value\", value);\n};\n\n// src/pin-input.utils.ts\nvar REGEX = {\n  numeric: /^[0-9]+$/,\n  alphabetic: /^[A-Za-z]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/i\n};\nfunction isValidType(type, value) {\n  if (!type) return true;\n  return !!REGEX[type]?.test(value);\n}\nfunction isValidValue(value, type, pattern) {\n  if (!pattern) return isValidType(type, value);\n  const regex = new RegExp(pattern, \"g\");\n  return regex.test(value);\n}\n\n// src/pin-input.connect.ts\nfunction connect(service, normalize) {\n  const {\n    send,\n    context,\n    computed,\n    prop,\n    scope\n  } = service;\n  const complete = computed(\"isValueComplete\");\n  const invalid = prop(\"invalid\");\n  const translations = prop(\"translations\");\n  const focusedIndex = context.get(\"focusedIndex\");\n  function focus() {\n    getFirstInputEl(scope)?.focus();\n  }\n  return {\n    focus,\n    count: context.get(\"count\"),\n    items: Array.from({\n      length: context.get(\"count\")\n    }).map((_, i) => i),\n    value: context.get(\"value\"),\n    valueAsString: computed(\"valueAsString\"),\n    complete,\n    setValue(value) {\n      if (!Array.isArray(value)) {\n        invariant(\"[pin-input/setValue] value must be an array\");\n      }\n      send({\n        type: \"VALUE.SET\",\n        value\n      });\n    },\n    clearValue() {\n      send({\n        type: \"VALUE.CLEAR\"\n      });\n    },\n    setValueAtIndex(index, value) {\n      send({\n        type: \"VALUE.SET\",\n        value,\n        index\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        dir: prop(\"dir\"),\n        ...parts.root.attrs,\n        id: getRootId(scope),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-disabled\": dataAttr(prop(\"disabled\")),\n        \"data-complete\": dataAttr(complete),\n        \"data-readonly\": dataAttr(prop(\"readOnly\"))\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        dir: prop(\"dir\"),\n        htmlFor: getHiddenInputId(scope),\n        id: getLabelId(scope),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-disabled\": dataAttr(prop(\"disabled\")),\n        \"data-complete\": dataAttr(complete),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        onClick(event) {\n          event.preventDefault();\n          focus();\n        }\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        \"aria-hidden\": true,\n        type: \"text\",\n        tabIndex: -1,\n        id: getHiddenInputId(scope),\n        readOnly: prop(\"readOnly\"),\n        disabled: prop(\"disabled\"),\n        required: prop(\"required\"),\n        name: prop(\"name\"),\n        form: prop(\"form\"),\n        style: visuallyHiddenStyle,\n        maxLength: computed(\"valueLength\"),\n        defaultValue: computed(\"valueAsString\")\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        dir: prop(\"dir\"),\n        id: getControlId(scope)\n      });\n    },\n    getInputProps(props2) {\n      const {\n        index\n      } = props2;\n      const inputType = prop(\"type\") === \"numeric\" ? \"tel\" : \"text\";\n      return normalize.input({\n        ...parts.input.attrs,\n        dir: prop(\"dir\"),\n        disabled: prop(\"disabled\"),\n        \"data-disabled\": dataAttr(prop(\"disabled\")),\n        \"data-complete\": dataAttr(complete),\n        id: getInputId(scope, index.toString()),\n        \"data-index\": index,\n        \"data-ownedby\": getRootId(scope),\n        \"aria-label\": translations?.inputLabel?.(index, computed(\"valueLength\")),\n        inputMode: prop(\"otp\") || prop(\"type\") === \"numeric\" ? \"numeric\" : \"text\",\n        \"aria-invalid\": ariaAttr(invalid),\n        \"data-invalid\": dataAttr(invalid),\n        type: prop(\"mask\") ? \"password\" : inputType,\n        defaultValue: context.get(\"value\")[index] || \"\",\n        readOnly: prop(\"readOnly\"),\n        autoCapitalize: \"none\",\n        autoComplete: prop(\"otp\") ? \"one-time-code\" : \"off\",\n        placeholder: focusedIndex === index ? \"\" : prop(\"placeholder\"),\n        onBeforeInput(event) {\n          try {\n            const value = getBeforeInputValue(event);\n            const isValid = isValidValue(value, prop(\"type\"), prop(\"pattern\"));\n            if (!isValid) {\n              send({\n                type: \"VALUE.INVALID\",\n                value\n              });\n              event.preventDefault();\n            }\n            if (value.length > 2) {\n              event.currentTarget.setSelectionRange(0, 1, \"forward\");\n            }\n          } catch {}\n        },\n        onChange(event) {\n          const evt = getNativeEvent(event);\n          const {\n            value\n          } = event.currentTarget;\n          if (evt.inputType === \"insertFromPaste\" || value.length > 2) {\n            send({\n              type: \"INPUT.PASTE\",\n              value\n            });\n            event.currentTarget.value = value[0];\n            event.preventDefault();\n            return;\n          }\n          if (evt.inputType === \"deleteContentBackward\") {\n            send({\n              type: \"INPUT.BACKSPACE\"\n            });\n            return;\n          }\n          send({\n            type: \"INPUT.CHANGE\",\n            value,\n            index\n          });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          if (isModifierKey(event)) return;\n          const keyMap = {\n            Backspace() {\n              send({\n                type: \"INPUT.BACKSPACE\"\n              });\n            },\n            Delete() {\n              send({\n                type: \"INPUT.DELETE\"\n              });\n            },\n            ArrowLeft() {\n              send({\n                type: \"INPUT.ARROW_LEFT\"\n              });\n            },\n            ArrowRight() {\n              send({\n                type: \"INPUT.ARROW_RIGHT\"\n              });\n            },\n            Enter() {\n              send({\n                type: \"INPUT.ENTER\"\n              });\n            }\n          };\n          const exec = keyMap[getEventKey(event, {\n            dir: prop(\"dir\"),\n            orientation: \"horizontal\"\n          })];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        },\n        onFocus() {\n          send({\n            type: \"INPUT.FOCUS\",\n            index\n          });\n        },\n        onBlur(event) {\n          const target = event.relatedTarget;\n          if (isHTMLElement(target) && target.dataset.ownedby === getRootId(scope)) return;\n          send({\n            type: \"INPUT.BLUR\",\n            index\n          });\n        }\n      });\n    }\n  };\n}\nvar {\n  choose,\n  createMachine\n} = setup();\nvar machine = createMachine({\n  props({\n    props: props2\n  }) {\n    return {\n      placeholder: \"\\u25CB\",\n      otp: false,\n      type: \"numeric\",\n      defaultValue: props2.count ? fill([], props2.count) : [],\n      ...props2,\n      translations: {\n        inputLabel: (index, length) => `pin code ${index + 1} of ${length}`,\n        ...props2.translations\n      }\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context({\n    prop,\n    bindable\n  }) {\n    return {\n      value: bindable(() => ({\n        value: prop(\"value\"),\n        defaultValue: prop(\"defaultValue\"),\n        isEqual,\n        onChange(value) {\n          prop(\"onValueChange\")?.({\n            value,\n            valueAsString: value.join(\"\")\n          });\n        }\n      })),\n      focusedIndex: bindable(() => ({\n        sync: true,\n        defaultValue: -1\n      })),\n      // TODO: Move this to `props` in next major version\n      count: bindable(() => ({\n        defaultValue: prop(\"count\")\n      }))\n    };\n  },\n  computed: {\n    _value: ({\n      context\n    }) => fill(context.get(\"value\"), context.get(\"count\")),\n    valueLength: ({\n      computed\n    }) => computed(\"_value\").length,\n    filledValueLength: ({\n      computed\n    }) => computed(\"_value\").filter(v => v?.trim() !== \"\").length,\n    isValueComplete: ({\n      computed\n    }) => computed(\"valueLength\") === computed(\"filledValueLength\"),\n    valueAsString: ({\n      computed\n    }) => computed(\"_value\").join(\"\"),\n    focusedValue: ({\n      computed,\n      context\n    }) => computed(\"_value\")[context.get(\"focusedIndex\")] || \"\"\n  },\n  entry: choose([{\n    guard: \"autoFocus\",\n    actions: [\"setInputCount\", \"setFocusIndexToFirst\"]\n  }, {\n    actions: [\"setInputCount\"]\n  }]),\n  watch({\n    action,\n    track,\n    context,\n    computed\n  }) {\n    track([() => context.get(\"focusedIndex\")], () => {\n      action([\"focusInput\", \"selectInputIfNeeded\"]);\n    });\n    track([() => context.get(\"value\").join(\",\")], () => {\n      action([\"syncInputElements\", \"dispatchInputEvent\"]);\n    });\n    track([() => computed(\"isValueComplete\")], () => {\n      action([\"invokeOnComplete\", \"blurFocusedInputIfNeeded\"]);\n    });\n  },\n  on: {\n    \"VALUE.SET\": [{\n      guard: \"hasIndex\",\n      actions: [\"setValueAtIndex\"]\n    }, {\n      actions: [\"setValue\"]\n    }],\n    \"VALUE.CLEAR\": {\n      actions: [\"clearValue\", \"setFocusIndexToFirst\"]\n    }\n  },\n  states: {\n    idle: {\n      on: {\n        \"INPUT.FOCUS\": {\n          target: \"focused\",\n          actions: [\"setFocusedIndex\"]\n        }\n      }\n    },\n    focused: {\n      on: {\n        \"INPUT.CHANGE\": {\n          actions: [\"setFocusedValue\", \"syncInputValue\", \"setNextFocusedIndex\"]\n        },\n        \"INPUT.PASTE\": {\n          actions: [\"setPastedValue\", \"setLastValueFocusIndex\"]\n        },\n        \"INPUT.FOCUS\": {\n          actions: [\"setFocusedIndex\"]\n        },\n        \"INPUT.BLUR\": {\n          target: \"idle\",\n          actions: [\"clearFocusedIndex\"]\n        },\n        \"INPUT.DELETE\": {\n          guard: \"hasValue\",\n          actions: [\"clearFocusedValue\"]\n        },\n        \"INPUT.ARROW_LEFT\": {\n          actions: [\"setPrevFocusedIndex\"]\n        },\n        \"INPUT.ARROW_RIGHT\": {\n          actions: [\"setNextFocusedIndex\"]\n        },\n        \"INPUT.BACKSPACE\": [{\n          guard: \"hasValue\",\n          actions: [\"clearFocusedValue\"]\n        }, {\n          actions: [\"setPrevFocusedIndex\", \"clearFocusedValue\"]\n        }],\n        \"INPUT.ENTER\": {\n          guard: \"isValueComplete\",\n          actions: [\"requestFormSubmit\"]\n        },\n        \"VALUE.INVALID\": {\n          actions: [\"invokeOnInvalid\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      autoFocus: ({\n        prop\n      }) => !!prop(\"autoFocus\"),\n      hasValue: ({\n        context\n      }) => context.get(\"value\")[context.get(\"focusedIndex\")] !== \"\",\n      isValueComplete: ({\n        computed\n      }) => computed(\"isValueComplete\"),\n      hasIndex: ({\n        event\n      }) => event.index !== void 0\n    },\n    actions: {\n      dispatchInputEvent({\n        computed,\n        scope\n      }) {\n        const inputEl = getHiddenInputEl(scope);\n        dispatchInputValueEvent(inputEl, {\n          value: computed(\"valueAsString\")\n        });\n      },\n      setInputCount({\n        scope,\n        context,\n        prop\n      }) {\n        if (prop(\"count\")) return;\n        const inputEls = getInputEls(scope);\n        context.set(\"count\", inputEls.length);\n      },\n      focusInput({\n        context,\n        scope\n      }) {\n        const focusedIndex = context.get(\"focusedIndex\");\n        if (focusedIndex === -1) return;\n        getInputElAtIndex(scope, focusedIndex)?.focus({\n          preventScroll: true\n        });\n      },\n      selectInputIfNeeded({\n        context,\n        prop,\n        scope\n      }) {\n        const focusedIndex = context.get(\"focusedIndex\");\n        if (!prop(\"selectOnFocus\") || focusedIndex === -1) return;\n        raf(() => {\n          getInputElAtIndex(scope, focusedIndex)?.select();\n        });\n      },\n      invokeOnComplete({\n        computed,\n        prop\n      }) {\n        if (!computed(\"isValueComplete\")) return;\n        prop(\"onValueComplete\")?.({\n          value: computed(\"_value\"),\n          valueAsString: computed(\"valueAsString\")\n        });\n      },\n      invokeOnInvalid({\n        context,\n        event,\n        prop\n      }) {\n        prop(\"onValueInvalid\")?.({\n          value: event.value,\n          index: context.get(\"focusedIndex\")\n        });\n      },\n      clearFocusedIndex({\n        context\n      }) {\n        context.set(\"focusedIndex\", -1);\n      },\n      setFocusedIndex({\n        context,\n        event\n      }) {\n        context.set(\"focusedIndex\", event.index);\n      },\n      setValue({\n        context,\n        event\n      }) {\n        const value = fill(event.value, context.get(\"count\"));\n        context.set(\"value\", value);\n      },\n      setFocusedValue({\n        context,\n        event,\n        computed,\n        flush\n      }) {\n        const focusedValue = computed(\"focusedValue\");\n        const focusedIndex = context.get(\"focusedIndex\");\n        const value = getNextValue(focusedValue, event.value);\n        flush(() => {\n          context.set(\"value\", setValueAtIndex(computed(\"_value\"), focusedIndex, value));\n        });\n      },\n      revertInputValue({\n        context,\n        computed,\n        scope\n      }) {\n        const inputEl = getInputElAtIndex(scope, context.get(\"focusedIndex\"));\n        setInputValue(inputEl, computed(\"focusedValue\"));\n      },\n      syncInputValue({\n        context,\n        event,\n        scope\n      }) {\n        const value = context.get(\"value\");\n        const inputEl = getInputElAtIndex(scope, event.index);\n        setInputValue(inputEl, value[event.index]);\n      },\n      syncInputElements({\n        context,\n        scope\n      }) {\n        const inputEls = getInputEls(scope);\n        const value = context.get(\"value\");\n        inputEls.forEach((inputEl, index) => {\n          setInputValue(inputEl, value[index]);\n        });\n      },\n      setPastedValue({\n        context,\n        event,\n        computed,\n        flush\n      }) {\n        raf(() => {\n          const valueAsString = computed(\"valueAsString\");\n          const focusedIndex = context.get(\"focusedIndex\");\n          const valueLength = computed(\"valueLength\");\n          const filledValueLength = computed(\"filledValueLength\");\n          const startIndex = Math.min(focusedIndex, filledValueLength);\n          const left = startIndex > 0 ? valueAsString.substring(0, focusedIndex) : \"\";\n          const right = event.value.substring(0, valueLength - startIndex);\n          const value = fill(`${left}${right}`.split(\"\"), valueLength);\n          flush(() => {\n            context.set(\"value\", value);\n          });\n        });\n      },\n      setValueAtIndex({\n        context,\n        event,\n        computed\n      }) {\n        const nextValue = getNextValue(computed(\"focusedValue\"), event.value);\n        context.set(\"value\", setValueAtIndex(computed(\"_value\"), event.index, nextValue));\n      },\n      clearValue({\n        context\n      }) {\n        const nextValue = Array.from({\n          length: context.get(\"count\")\n        }).fill(\"\");\n        context.set(\"value\", nextValue);\n      },\n      clearFocusedValue({\n        context,\n        computed\n      }) {\n        const focusedIndex = context.get(\"focusedIndex\");\n        if (focusedIndex === -1) return;\n        context.set(\"value\", setValueAtIndex(computed(\"_value\"), focusedIndex, \"\"));\n      },\n      setFocusIndexToFirst({\n        context\n      }) {\n        context.set(\"focusedIndex\", 0);\n      },\n      setNextFocusedIndex({\n        context,\n        computed\n      }) {\n        context.set(\"focusedIndex\", Math.min(context.get(\"focusedIndex\") + 1, computed(\"valueLength\") - 1));\n      },\n      setPrevFocusedIndex({\n        context\n      }) {\n        context.set(\"focusedIndex\", Math.max(context.get(\"focusedIndex\") - 1, 0));\n      },\n      setLastValueFocusIndex({\n        context,\n        computed\n      }) {\n        raf(() => {\n          context.set(\"focusedIndex\", Math.min(computed(\"filledValueLength\"), computed(\"valueLength\") - 1));\n        });\n      },\n      blurFocusedInputIfNeeded({\n        context,\n        prop,\n        scope\n      }) {\n        if (!prop(\"blurOnComplete\")) return;\n        raf(() => {\n          getInputElAtIndex(scope, context.get(\"focusedIndex\"))?.blur();\n        });\n      },\n      requestFormSubmit({\n        computed,\n        prop,\n        scope\n      }) {\n        if (!prop(\"name\") || !computed(\"isValueComplete\")) return;\n        const inputEl = getHiddenInputEl(scope);\n        inputEl?.form?.requestSubmit();\n      }\n    }\n  }\n});\nfunction getNextValue(current, next) {\n  let nextValue = next;\n  if (current[0] === next[0]) nextValue = next[1];else if (current[0] === next[1]) nextValue = next[0];\n  return nextValue.split(\"\")[nextValue.length - 1];\n}\nfunction fill(value, count) {\n  return Array.from({\n    length: count\n  }).fill(\"\").map((v, i) => value[i] || v);\n}\nvar props = createProps()([\"autoFocus\", \"blurOnComplete\", \"count\", \"defaultValue\", \"dir\", \"disabled\", \"form\", \"getRootNode\", \"id\", \"ids\", \"invalid\", \"mask\", \"name\", \"onValueChange\", \"onValueComplete\", \"onValueInvalid\", \"otp\", \"pattern\", \"placeholder\", \"readOnly\", \"required\", \"selectOnFocus\", \"translations\", \"type\", \"value\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":{"version":3,"names":["createAnatomy","raf","dispatchInputValueEvent","queryAll","dataAttr","ariaAttr","isHTMLElement","isComposingEvent","isModifierKey","getEventKey","getNativeEvent","getBeforeInputValue","visuallyHiddenStyle","setValueAtIndex","isEqual","createSplitProps","invariant","setup","createProps","anatomy","parts","build","getRootId","ctx","ids","root","id","getInputId","input","getHiddenInputId","hiddenInput","getLabelId","label","getControlId","control","getRootEl","getById","getInputEls","ownerId","CSS","escape","selector","getInputElAtIndex","index","getFirstInputEl","getHiddenInputEl","setInputValue","inputEl","value","setAttribute","REGEX","numeric","alphabetic","alphanumeric","isValidType","type","test","isValidValue","pattern","regex","RegExp","connect","service","normalize","send","context","computed","prop","scope","complete","invalid","translations","focusedIndex","get","focus","count","items","Array","from","length","map","_","i","valueAsString","setValue","isArray","clearValue","getRootProps","element","dir","attrs","getLabelProps","htmlFor","onClick","event","preventDefault","getHiddenInputProps","tabIndex","readOnly","disabled","required","name","form","style","maxLength","defaultValue","getControlProps","getInputProps","props2","inputType","toString","inputLabel","inputMode","autoCapitalize","autoComplete","placeholder","onBeforeInput","isValid","currentTarget","setSelectionRange","onChange","evt","onKeyDown","defaultPrevented","keyMap","Backspace","Delete","ArrowLeft","ArrowRight","Enter","exec","orientation","onFocus","onBlur","target","relatedTarget","dataset","ownedby","choose","createMachine","machine","props","otp","fill","initialState","bindable","join","sync","_value","valueLength","filledValueLength","filter","v","trim","isValueComplete","focusedValue","entry","guard","actions","watch","action","track","on","states","idle","focused","implementations","guards","autoFocus","hasValue","hasIndex","dispatchInputEvent","setInputCount","inputEls","set","focusInput","preventScroll","selectInputIfNeeded","select","invokeOnComplete","invokeOnInvalid","clearFocusedIndex","setFocusedIndex","setFocusedValue","flush","getNextValue","revertInputValue","syncInputValue","syncInputElements","forEach","setPastedValue","startIndex","Math","min","left","substring","right","split","nextValue","clearFocusedValue","setFocusIndexToFirst","setNextFocusedIndex","setPrevFocusedIndex","max","setLastValueFocusIndex","blurFocusedInputIfNeeded","blur","requestFormSubmit","requestSubmit","current","next","splitProps"],"sources":["C:/Users/tuanl/weekly-todo-frontend/node_modules/@zag-js/pin-input/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\nimport { raf, dispatchInputValueEvent, queryAll, dataAttr, ariaAttr, isHTMLElement, isComposingEvent, isModifierKey, getEventKey, getNativeEvent, getBeforeInputValue, visuallyHiddenStyle } from '@zag-js/dom-query';\nimport { setValueAtIndex, isEqual, createSplitProps, invariant } from '@zag-js/utils';\nimport { setup } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\n\n// src/pin-input.anatomy.ts\nvar anatomy = createAnatomy(\"pinInput\").parts(\"root\", \"label\", \"input\", \"control\");\nvar parts = anatomy.build();\nvar getRootId = (ctx) => ctx.ids?.root ?? `pin-input:${ctx.id}`;\nvar getInputId = (ctx, id) => ctx.ids?.input?.(id) ?? `pin-input:${ctx.id}:${id}`;\nvar getHiddenInputId = (ctx) => ctx.ids?.hiddenInput ?? `pin-input:${ctx.id}:hidden`;\nvar getLabelId = (ctx) => ctx.ids?.label ?? `pin-input:${ctx.id}:label`;\nvar getControlId = (ctx) => ctx.ids?.control ?? `pin-input:${ctx.id}:control`;\nvar getRootEl = (ctx) => ctx.getById(getRootId(ctx));\nvar getInputEls = (ctx) => {\n  const ownerId = CSS.escape(getRootId(ctx));\n  const selector = `input[data-ownedby=${ownerId}]`;\n  return queryAll(getRootEl(ctx), selector);\n};\nvar getInputElAtIndex = (ctx, index) => getInputEls(ctx)[index];\nvar getFirstInputEl = (ctx) => getInputEls(ctx)[0];\nvar getHiddenInputEl = (ctx) => ctx.getById(getHiddenInputId(ctx));\nvar setInputValue = (inputEl, value) => {\n  inputEl.value = value;\n  inputEl.setAttribute(\"value\", value);\n};\n\n// src/pin-input.utils.ts\nvar REGEX = {\n  numeric: /^[0-9]+$/,\n  alphabetic: /^[A-Za-z]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/i\n};\nfunction isValidType(type, value) {\n  if (!type) return true;\n  return !!REGEX[type]?.test(value);\n}\nfunction isValidValue(value, type, pattern) {\n  if (!pattern) return isValidType(type, value);\n  const regex = new RegExp(pattern, \"g\");\n  return regex.test(value);\n}\n\n// src/pin-input.connect.ts\nfunction connect(service, normalize) {\n  const { send, context, computed, prop, scope } = service;\n  const complete = computed(\"isValueComplete\");\n  const invalid = prop(\"invalid\");\n  const translations = prop(\"translations\");\n  const focusedIndex = context.get(\"focusedIndex\");\n  function focus() {\n    getFirstInputEl(scope)?.focus();\n  }\n  return {\n    focus,\n    count: context.get(\"count\"),\n    items: Array.from({ length: context.get(\"count\") }).map((_, i) => i),\n    value: context.get(\"value\"),\n    valueAsString: computed(\"valueAsString\"),\n    complete,\n    setValue(value) {\n      if (!Array.isArray(value)) {\n        invariant(\"[pin-input/setValue] value must be an array\");\n      }\n      send({ type: \"VALUE.SET\", value });\n    },\n    clearValue() {\n      send({ type: \"VALUE.CLEAR\" });\n    },\n    setValueAtIndex(index, value) {\n      send({ type: \"VALUE.SET\", value, index });\n    },\n    getRootProps() {\n      return normalize.element({\n        dir: prop(\"dir\"),\n        ...parts.root.attrs,\n        id: getRootId(scope),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-disabled\": dataAttr(prop(\"disabled\")),\n        \"data-complete\": dataAttr(complete),\n        \"data-readonly\": dataAttr(prop(\"readOnly\"))\n      });\n    },\n    getLabelProps() {\n      return normalize.label({\n        ...parts.label.attrs,\n        dir: prop(\"dir\"),\n        htmlFor: getHiddenInputId(scope),\n        id: getLabelId(scope),\n        \"data-invalid\": dataAttr(invalid),\n        \"data-disabled\": dataAttr(prop(\"disabled\")),\n        \"data-complete\": dataAttr(complete),\n        \"data-readonly\": dataAttr(prop(\"readOnly\")),\n        onClick(event) {\n          event.preventDefault();\n          focus();\n        }\n      });\n    },\n    getHiddenInputProps() {\n      return normalize.input({\n        \"aria-hidden\": true,\n        type: \"text\",\n        tabIndex: -1,\n        id: getHiddenInputId(scope),\n        readOnly: prop(\"readOnly\"),\n        disabled: prop(\"disabled\"),\n        required: prop(\"required\"),\n        name: prop(\"name\"),\n        form: prop(\"form\"),\n        style: visuallyHiddenStyle,\n        maxLength: computed(\"valueLength\"),\n        defaultValue: computed(\"valueAsString\")\n      });\n    },\n    getControlProps() {\n      return normalize.element({\n        ...parts.control.attrs,\n        dir: prop(\"dir\"),\n        id: getControlId(scope)\n      });\n    },\n    getInputProps(props2) {\n      const { index } = props2;\n      const inputType = prop(\"type\") === \"numeric\" ? \"tel\" : \"text\";\n      return normalize.input({\n        ...parts.input.attrs,\n        dir: prop(\"dir\"),\n        disabled: prop(\"disabled\"),\n        \"data-disabled\": dataAttr(prop(\"disabled\")),\n        \"data-complete\": dataAttr(complete),\n        id: getInputId(scope, index.toString()),\n        \"data-index\": index,\n        \"data-ownedby\": getRootId(scope),\n        \"aria-label\": translations?.inputLabel?.(index, computed(\"valueLength\")),\n        inputMode: prop(\"otp\") || prop(\"type\") === \"numeric\" ? \"numeric\" : \"text\",\n        \"aria-invalid\": ariaAttr(invalid),\n        \"data-invalid\": dataAttr(invalid),\n        type: prop(\"mask\") ? \"password\" : inputType,\n        defaultValue: context.get(\"value\")[index] || \"\",\n        readOnly: prop(\"readOnly\"),\n        autoCapitalize: \"none\",\n        autoComplete: prop(\"otp\") ? \"one-time-code\" : \"off\",\n        placeholder: focusedIndex === index ? \"\" : prop(\"placeholder\"),\n        onBeforeInput(event) {\n          try {\n            const value = getBeforeInputValue(event);\n            const isValid = isValidValue(value, prop(\"type\"), prop(\"pattern\"));\n            if (!isValid) {\n              send({ type: \"VALUE.INVALID\", value });\n              event.preventDefault();\n            }\n            if (value.length > 2) {\n              event.currentTarget.setSelectionRange(0, 1, \"forward\");\n            }\n          } catch {\n          }\n        },\n        onChange(event) {\n          const evt = getNativeEvent(event);\n          const { value } = event.currentTarget;\n          if (evt.inputType === \"insertFromPaste\" || value.length > 2) {\n            send({ type: \"INPUT.PASTE\", value });\n            event.currentTarget.value = value[0];\n            event.preventDefault();\n            return;\n          }\n          if (evt.inputType === \"deleteContentBackward\") {\n            send({ type: \"INPUT.BACKSPACE\" });\n            return;\n          }\n          send({ type: \"INPUT.CHANGE\", value, index });\n        },\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          if (isModifierKey(event)) return;\n          const keyMap = {\n            Backspace() {\n              send({ type: \"INPUT.BACKSPACE\" });\n            },\n            Delete() {\n              send({ type: \"INPUT.DELETE\" });\n            },\n            ArrowLeft() {\n              send({ type: \"INPUT.ARROW_LEFT\" });\n            },\n            ArrowRight() {\n              send({ type: \"INPUT.ARROW_RIGHT\" });\n            },\n            Enter() {\n              send({ type: \"INPUT.ENTER\" });\n            }\n          };\n          const exec = keyMap[getEventKey(event, {\n            dir: prop(\"dir\"),\n            orientation: \"horizontal\"\n          })];\n          if (exec) {\n            exec(event);\n            event.preventDefault();\n          }\n        },\n        onFocus() {\n          send({ type: \"INPUT.FOCUS\", index });\n        },\n        onBlur(event) {\n          const target = event.relatedTarget;\n          if (isHTMLElement(target) && target.dataset.ownedby === getRootId(scope)) return;\n          send({ type: \"INPUT.BLUR\", index });\n        }\n      });\n    }\n  };\n}\nvar { choose, createMachine } = setup();\nvar machine = createMachine({\n  props({ props: props2 }) {\n    return {\n      placeholder: \"\\u25CB\",\n      otp: false,\n      type: \"numeric\",\n      defaultValue: props2.count ? fill([], props2.count) : [],\n      ...props2,\n      translations: {\n        inputLabel: (index, length) => `pin code ${index + 1} of ${length}`,\n        ...props2.translations\n      }\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context({ prop, bindable }) {\n    return {\n      value: bindable(() => ({\n        value: prop(\"value\"),\n        defaultValue: prop(\"defaultValue\"),\n        isEqual,\n        onChange(value) {\n          prop(\"onValueChange\")?.({ value, valueAsString: value.join(\"\") });\n        }\n      })),\n      focusedIndex: bindable(() => ({\n        sync: true,\n        defaultValue: -1\n      })),\n      // TODO: Move this to `props` in next major version\n      count: bindable(() => ({\n        defaultValue: prop(\"count\")\n      }))\n    };\n  },\n  computed: {\n    _value: ({ context }) => fill(context.get(\"value\"), context.get(\"count\")),\n    valueLength: ({ computed }) => computed(\"_value\").length,\n    filledValueLength: ({ computed }) => computed(\"_value\").filter((v) => v?.trim() !== \"\").length,\n    isValueComplete: ({ computed }) => computed(\"valueLength\") === computed(\"filledValueLength\"),\n    valueAsString: ({ computed }) => computed(\"_value\").join(\"\"),\n    focusedValue: ({ computed, context }) => computed(\"_value\")[context.get(\"focusedIndex\")] || \"\"\n  },\n  entry: choose([\n    {\n      guard: \"autoFocus\",\n      actions: [\"setInputCount\", \"setFocusIndexToFirst\"]\n    },\n    { actions: [\"setInputCount\"] }\n  ]),\n  watch({ action, track, context, computed }) {\n    track([() => context.get(\"focusedIndex\")], () => {\n      action([\"focusInput\", \"selectInputIfNeeded\"]);\n    });\n    track([() => context.get(\"value\").join(\",\")], () => {\n      action([\"syncInputElements\", \"dispatchInputEvent\"]);\n    });\n    track([() => computed(\"isValueComplete\")], () => {\n      action([\"invokeOnComplete\", \"blurFocusedInputIfNeeded\"]);\n    });\n  },\n  on: {\n    \"VALUE.SET\": [\n      {\n        guard: \"hasIndex\",\n        actions: [\"setValueAtIndex\"]\n      },\n      { actions: [\"setValue\"] }\n    ],\n    \"VALUE.CLEAR\": {\n      actions: [\"clearValue\", \"setFocusIndexToFirst\"]\n    }\n  },\n  states: {\n    idle: {\n      on: {\n        \"INPUT.FOCUS\": {\n          target: \"focused\",\n          actions: [\"setFocusedIndex\"]\n        }\n      }\n    },\n    focused: {\n      on: {\n        \"INPUT.CHANGE\": {\n          actions: [\"setFocusedValue\", \"syncInputValue\", \"setNextFocusedIndex\"]\n        },\n        \"INPUT.PASTE\": {\n          actions: [\"setPastedValue\", \"setLastValueFocusIndex\"]\n        },\n        \"INPUT.FOCUS\": {\n          actions: [\"setFocusedIndex\"]\n        },\n        \"INPUT.BLUR\": {\n          target: \"idle\",\n          actions: [\"clearFocusedIndex\"]\n        },\n        \"INPUT.DELETE\": {\n          guard: \"hasValue\",\n          actions: [\"clearFocusedValue\"]\n        },\n        \"INPUT.ARROW_LEFT\": {\n          actions: [\"setPrevFocusedIndex\"]\n        },\n        \"INPUT.ARROW_RIGHT\": {\n          actions: [\"setNextFocusedIndex\"]\n        },\n        \"INPUT.BACKSPACE\": [\n          {\n            guard: \"hasValue\",\n            actions: [\"clearFocusedValue\"]\n          },\n          {\n            actions: [\"setPrevFocusedIndex\", \"clearFocusedValue\"]\n          }\n        ],\n        \"INPUT.ENTER\": {\n          guard: \"isValueComplete\",\n          actions: [\"requestFormSubmit\"]\n        },\n        \"VALUE.INVALID\": {\n          actions: [\"invokeOnInvalid\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      autoFocus: ({ prop }) => !!prop(\"autoFocus\"),\n      hasValue: ({ context }) => context.get(\"value\")[context.get(\"focusedIndex\")] !== \"\",\n      isValueComplete: ({ computed }) => computed(\"isValueComplete\"),\n      hasIndex: ({ event }) => event.index !== void 0\n    },\n    actions: {\n      dispatchInputEvent({ computed, scope }) {\n        const inputEl = getHiddenInputEl(scope);\n        dispatchInputValueEvent(inputEl, { value: computed(\"valueAsString\") });\n      },\n      setInputCount({ scope, context, prop }) {\n        if (prop(\"count\")) return;\n        const inputEls = getInputEls(scope);\n        context.set(\"count\", inputEls.length);\n      },\n      focusInput({ context, scope }) {\n        const focusedIndex = context.get(\"focusedIndex\");\n        if (focusedIndex === -1) return;\n        getInputElAtIndex(scope, focusedIndex)?.focus({ preventScroll: true });\n      },\n      selectInputIfNeeded({ context, prop, scope }) {\n        const focusedIndex = context.get(\"focusedIndex\");\n        if (!prop(\"selectOnFocus\") || focusedIndex === -1) return;\n        raf(() => {\n          getInputElAtIndex(scope, focusedIndex)?.select();\n        });\n      },\n      invokeOnComplete({ computed, prop }) {\n        if (!computed(\"isValueComplete\")) return;\n        prop(\"onValueComplete\")?.({\n          value: computed(\"_value\"),\n          valueAsString: computed(\"valueAsString\")\n        });\n      },\n      invokeOnInvalid({ context, event, prop }) {\n        prop(\"onValueInvalid\")?.({\n          value: event.value,\n          index: context.get(\"focusedIndex\")\n        });\n      },\n      clearFocusedIndex({ context }) {\n        context.set(\"focusedIndex\", -1);\n      },\n      setFocusedIndex({ context, event }) {\n        context.set(\"focusedIndex\", event.index);\n      },\n      setValue({ context, event }) {\n        const value = fill(event.value, context.get(\"count\"));\n        context.set(\"value\", value);\n      },\n      setFocusedValue({ context, event, computed, flush }) {\n        const focusedValue = computed(\"focusedValue\");\n        const focusedIndex = context.get(\"focusedIndex\");\n        const value = getNextValue(focusedValue, event.value);\n        flush(() => {\n          context.set(\"value\", setValueAtIndex(computed(\"_value\"), focusedIndex, value));\n        });\n      },\n      revertInputValue({ context, computed, scope }) {\n        const inputEl = getInputElAtIndex(scope, context.get(\"focusedIndex\"));\n        setInputValue(inputEl, computed(\"focusedValue\"));\n      },\n      syncInputValue({ context, event, scope }) {\n        const value = context.get(\"value\");\n        const inputEl = getInputElAtIndex(scope, event.index);\n        setInputValue(inputEl, value[event.index]);\n      },\n      syncInputElements({ context, scope }) {\n        const inputEls = getInputEls(scope);\n        const value = context.get(\"value\");\n        inputEls.forEach((inputEl, index) => {\n          setInputValue(inputEl, value[index]);\n        });\n      },\n      setPastedValue({ context, event, computed, flush }) {\n        raf(() => {\n          const valueAsString = computed(\"valueAsString\");\n          const focusedIndex = context.get(\"focusedIndex\");\n          const valueLength = computed(\"valueLength\");\n          const filledValueLength = computed(\"filledValueLength\");\n          const startIndex = Math.min(focusedIndex, filledValueLength);\n          const left = startIndex > 0 ? valueAsString.substring(0, focusedIndex) : \"\";\n          const right = event.value.substring(0, valueLength - startIndex);\n          const value = fill(`${left}${right}`.split(\"\"), valueLength);\n          flush(() => {\n            context.set(\"value\", value);\n          });\n        });\n      },\n      setValueAtIndex({ context, event, computed }) {\n        const nextValue = getNextValue(computed(\"focusedValue\"), event.value);\n        context.set(\"value\", setValueAtIndex(computed(\"_value\"), event.index, nextValue));\n      },\n      clearValue({ context }) {\n        const nextValue = Array.from({ length: context.get(\"count\") }).fill(\"\");\n        context.set(\"value\", nextValue);\n      },\n      clearFocusedValue({ context, computed }) {\n        const focusedIndex = context.get(\"focusedIndex\");\n        if (focusedIndex === -1) return;\n        context.set(\"value\", setValueAtIndex(computed(\"_value\"), focusedIndex, \"\"));\n      },\n      setFocusIndexToFirst({ context }) {\n        context.set(\"focusedIndex\", 0);\n      },\n      setNextFocusedIndex({ context, computed }) {\n        context.set(\"focusedIndex\", Math.min(context.get(\"focusedIndex\") + 1, computed(\"valueLength\") - 1));\n      },\n      setPrevFocusedIndex({ context }) {\n        context.set(\"focusedIndex\", Math.max(context.get(\"focusedIndex\") - 1, 0));\n      },\n      setLastValueFocusIndex({ context, computed }) {\n        raf(() => {\n          context.set(\"focusedIndex\", Math.min(computed(\"filledValueLength\"), computed(\"valueLength\") - 1));\n        });\n      },\n      blurFocusedInputIfNeeded({ context, prop, scope }) {\n        if (!prop(\"blurOnComplete\")) return;\n        raf(() => {\n          getInputElAtIndex(scope, context.get(\"focusedIndex\"))?.blur();\n        });\n      },\n      requestFormSubmit({ computed, prop, scope }) {\n        if (!prop(\"name\") || !computed(\"isValueComplete\")) return;\n        const inputEl = getHiddenInputEl(scope);\n        inputEl?.form?.requestSubmit();\n      }\n    }\n  }\n});\nfunction getNextValue(current, next) {\n  let nextValue = next;\n  if (current[0] === next[0]) nextValue = next[1];\n  else if (current[0] === next[1]) nextValue = next[0];\n  return nextValue.split(\"\")[nextValue.length - 1];\n}\nfunction fill(value, count) {\n  return Array.from({ length: count }).fill(\"\").map((v, i) => value[i] || v);\n}\nvar props = createProps()([\n  \"autoFocus\",\n  \"blurOnComplete\",\n  \"count\",\n  \"defaultValue\",\n  \"dir\",\n  \"disabled\",\n  \"form\",\n  \"getRootNode\",\n  \"id\",\n  \"ids\",\n  \"invalid\",\n  \"mask\",\n  \"name\",\n  \"onValueChange\",\n  \"onValueComplete\",\n  \"onValueInvalid\",\n  \"otp\",\n  \"pattern\",\n  \"placeholder\",\n  \"readOnly\",\n  \"required\",\n  \"selectOnFocus\",\n  \"translations\",\n  \"type\",\n  \"value\"\n]);\nvar splitProps = createSplitProps(props);\n\nexport { anatomy, connect, machine, props, splitProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}