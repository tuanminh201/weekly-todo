{"ast":null,"code":"'use client';\n\nimport { jsx } from 'react/jsx-runtime';\nimport { mergeProps } from '@zag-js/react';\nimport { forwardRef } from 'react';\nimport { createSplitProps } from '../../utils/create-split-props.js';\nimport { CollapsibleContent } from '../collapsible/collapsible-content.js';\nimport { useTreeViewContext } from './use-tree-view-context.js';\nimport { useTreeViewNodePropsContext } from './use-tree-view-node-props-context.js';\nconst splitVisibilityProps = createSplitProps();\nconst TreeViewBranchContent = forwardRef((props, ref) => {\n  const treeView = useTreeViewContext();\n  const nodeProps = useTreeViewNodePropsContext();\n  const contentProps = treeView.getBranchContentProps(nodeProps);\n  const [, branchContentProps] = splitVisibilityProps(contentProps, [\"hidden\", \"data-state\"]);\n  const mergedProps = mergeProps(branchContentProps, props);\n  return /* @__PURE__ */jsx(CollapsibleContent, {\n    ref,\n    ...mergedProps\n  });\n});\nTreeViewBranchContent.displayName = \"TreeViewBranchContent\";\nexport { TreeViewBranchContent };","map":{"version":3,"names":["jsx","mergeProps","forwardRef","createSplitProps","CollapsibleContent","useTreeViewContext","useTreeViewNodePropsContext","splitVisibilityProps","TreeViewBranchContent","props","ref","treeView","nodeProps","contentProps","getBranchContentProps","branchContentProps","mergedProps","displayName"],"sources":["C:/Users/tuanl/weekly-todo-frontend/node_modules/@chakra-ui/react/node_modules/@ark-ui/react/dist/components/tree-view/tree-view-branch-content.js"],"sourcesContent":["'use client';\nimport { jsx } from 'react/jsx-runtime';\nimport { mergeProps } from '@zag-js/react';\nimport { forwardRef } from 'react';\nimport { createSplitProps } from '../../utils/create-split-props.js';\nimport { CollapsibleContent } from '../collapsible/collapsible-content.js';\nimport { useTreeViewContext } from './use-tree-view-context.js';\nimport { useTreeViewNodePropsContext } from './use-tree-view-node-props-context.js';\n\nconst splitVisibilityProps = createSplitProps();\nconst TreeViewBranchContent = forwardRef((props, ref) => {\n  const treeView = useTreeViewContext();\n  const nodeProps = useTreeViewNodePropsContext();\n  const contentProps = treeView.getBranchContentProps(nodeProps);\n  const [, branchContentProps] = splitVisibilityProps(contentProps, [\"hidden\", \"data-state\"]);\n  const mergedProps = mergeProps(branchContentProps, props);\n  return /* @__PURE__ */ jsx(CollapsibleContent, { ref, ...mergedProps });\n});\nTreeViewBranchContent.displayName = \"TreeViewBranchContent\";\n\nexport { TreeViewBranchContent };\n"],"mappings":"AAAA,YAAY;;AACZ,SAASA,GAAG,QAAQ,mBAAmB;AACvC,SAASC,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,OAAO;AAClC,SAASC,gBAAgB,QAAQ,mCAAmC;AACpE,SAASC,kBAAkB,QAAQ,uCAAuC;AAC1E,SAASC,kBAAkB,QAAQ,4BAA4B;AAC/D,SAASC,2BAA2B,QAAQ,uCAAuC;AAEnF,MAAMC,oBAAoB,GAAGJ,gBAAgB,CAAC,CAAC;AAC/C,MAAMK,qBAAqB,GAAGN,UAAU,CAAC,CAACO,KAAK,EAAEC,GAAG,KAAK;EACvD,MAAMC,QAAQ,GAAGN,kBAAkB,CAAC,CAAC;EACrC,MAAMO,SAAS,GAAGN,2BAA2B,CAAC,CAAC;EAC/C,MAAMO,YAAY,GAAGF,QAAQ,CAACG,qBAAqB,CAACF,SAAS,CAAC;EAC9D,MAAM,GAAGG,kBAAkB,CAAC,GAAGR,oBAAoB,CAACM,YAAY,EAAE,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;EAC3F,MAAMG,WAAW,GAAGf,UAAU,CAACc,kBAAkB,EAAEN,KAAK,CAAC;EACzD,OAAO,eAAgBT,GAAG,CAACI,kBAAkB,EAAE;IAAEM,GAAG;IAAE,GAAGM;EAAY,CAAC,CAAC;AACzE,CAAC,CAAC;AACFR,qBAAqB,CAACS,WAAW,GAAG,uBAAuB;AAE3D,SAAST,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}