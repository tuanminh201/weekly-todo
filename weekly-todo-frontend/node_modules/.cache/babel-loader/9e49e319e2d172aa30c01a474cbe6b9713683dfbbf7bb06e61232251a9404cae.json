{"ast":null,"code":"\"use strict\";\n\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { omit } from '../utils/omit.js';\nconst shallowEqual = (a, b) => {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    const aKeys = Object.keys(a[i]);\n    const bKeys = Object.keys(b[i]);\n    if (aKeys.length !== bKeys.length) return false;\n    for (const key of aKeys) {\n      if (!Object.is(a[i][key], b[i][key])) return false;\n    }\n  }\n  return true;\n};\nfunction createOverlay(Component, options) {\n  const map = /* @__PURE__ */new Map();\n  const exitPromises = /* @__PURE__ */new Map();\n  const subscribers = /* @__PURE__ */new Set();\n  const subscribe = callback => {\n    subscribers.add(callback);\n    return () => subscribers.delete(callback);\n  };\n  const publish = () => {\n    for (const callback of subscribers) {\n      callback(getSnapshot());\n    }\n  };\n  let lastSnapshot = [];\n  const getSnapshot = () => {\n    const nextSnapshot = Array.from(map.values());\n    if (shallowEqual(lastSnapshot, nextSnapshot)) return lastSnapshot;\n    lastSnapshot = nextSnapshot;\n    return lastSnapshot;\n  };\n  const waitForExit = id => {\n    return exitPromises.get(id) || Promise.resolve();\n  };\n  const open = (id, props) => {\n    const overlayProps = {\n      ...options?.props,\n      ...props,\n      open: true,\n      onOpenChange: e => {\n        if (!e.open) close(id);\n      },\n      onExitComplete: () => {\n        const overlay = get(id);\n        if (overlay.setExitComplete) {\n          overlay.setExitComplete();\n          overlay.setExitComplete = void 0;\n        }\n        remove(id);\n      },\n      setReturnValue: void 0,\n      setExitComplete: void 0\n    };\n    map.set(id, overlayProps);\n    const prom = new Promise(resolve => {\n      map.set(id, {\n        ...overlayProps,\n        setReturnValue: resolve\n      });\n    });\n    publish();\n    return prom;\n  };\n  const close = (id, value) => {\n    const prevProps = get(id);\n    map.set(id, {\n      ...prevProps,\n      open: false\n    });\n    if (prevProps.setReturnValue) {\n      prevProps.setReturnValue(value);\n      prevProps.setReturnValue = void 0;\n    }\n    publish();\n    const exitPromise = new Promise(resolve => {\n      const overlay = get(id);\n      map.set(id, {\n        ...overlay,\n        setExitComplete: resolve\n      });\n    });\n    exitPromises.set(id, exitPromise);\n    return exitPromise;\n  };\n  const remove = id => {\n    map.delete(id);\n    exitPromises.delete(id);\n    publish();\n  };\n  const update = (id, props) => {\n    const prevProps = get(id);\n    map.set(id, {\n      ...prevProps,\n      ...omit(props, [\"open\", \"onOpenChange\", \"onExitComplete\"])\n    });\n    publish();\n  };\n  const get = id => {\n    const overlay = map.get(id);\n    if (!overlay) {\n      throw new Error(`[chakra-ui] Overlay with id ${id} not found`);\n    }\n    return overlay;\n  };\n  const removeAll = () => {\n    map.clear();\n    exitPromises.clear();\n    publish();\n  };\n  function Viewport() {\n    const overlays = React.useSyncExternalStore(subscribe, getSnapshot, getSnapshot);\n    return /* @__PURE__ */jsx(Fragment, {\n      children: overlays.map((props, index) =>\n      // @ts-expect-error - TODO: fix this\n      /* @__PURE__ */\n      jsx(Component, {\n        ...props\n      }, index))\n    });\n  }\n  return {\n    Viewport,\n    open,\n    close,\n    update,\n    remove,\n    removeAll,\n    get,\n    getSnapshot,\n    waitForExit\n  };\n}\nexport { createOverlay };","map":{"version":3,"names":["jsx","Fragment","React","omit","shallowEqual","a","b","length","i","aKeys","Object","keys","bKeys","key","is","createOverlay","Component","options","map","Map","exitPromises","subscribers","Set","subscribe","callback","add","delete","publish","getSnapshot","lastSnapshot","nextSnapshot","Array","from","values","waitForExit","id","get","Promise","resolve","open","props","overlayProps","onOpenChange","e","close","onExitComplete","overlay","setExitComplete","remove","setReturnValue","set","prom","value","prevProps","exitPromise","update","Error","removeAll","clear","Viewport","overlays","useSyncExternalStore","children","index"],"sources":["C:/Users/tuanl/weekly-todo-frontend/node_modules/@chakra-ui/react/dist/esm/hooks/use-overlay.js"],"sourcesContent":["\"use strict\";\nimport { jsx, Fragment } from 'react/jsx-runtime';\nimport * as React from 'react';\nimport { omit } from '../utils/omit.js';\n\nconst shallowEqual = (a, b) => {\n  if (a.length !== b.length) return false;\n  for (let i = 0; i < a.length; i++) {\n    const aKeys = Object.keys(a[i]);\n    const bKeys = Object.keys(b[i]);\n    if (aKeys.length !== bKeys.length) return false;\n    for (const key of aKeys) {\n      if (!Object.is(a[i][key], b[i][key])) return false;\n    }\n  }\n  return true;\n};\nfunction createOverlay(Component, options) {\n  const map = /* @__PURE__ */ new Map();\n  const exitPromises = /* @__PURE__ */ new Map();\n  const subscribers = /* @__PURE__ */ new Set();\n  const subscribe = (callback) => {\n    subscribers.add(callback);\n    return () => subscribers.delete(callback);\n  };\n  const publish = () => {\n    for (const callback of subscribers) {\n      callback(getSnapshot());\n    }\n  };\n  let lastSnapshot = [];\n  const getSnapshot = () => {\n    const nextSnapshot = Array.from(map.values());\n    if (shallowEqual(lastSnapshot, nextSnapshot)) return lastSnapshot;\n    lastSnapshot = nextSnapshot;\n    return lastSnapshot;\n  };\n  const waitForExit = (id) => {\n    return exitPromises.get(id) || Promise.resolve();\n  };\n  const open = (id, props) => {\n    const overlayProps = {\n      ...options?.props,\n      ...props,\n      open: true,\n      onOpenChange: (e) => {\n        if (!e.open) close(id);\n      },\n      onExitComplete: () => {\n        const overlay = get(id);\n        if (overlay.setExitComplete) {\n          overlay.setExitComplete();\n          overlay.setExitComplete = void 0;\n        }\n        remove(id);\n      },\n      setReturnValue: void 0,\n      setExitComplete: void 0\n    };\n    map.set(id, overlayProps);\n    const prom = new Promise((resolve) => {\n      map.set(id, {\n        ...overlayProps,\n        setReturnValue: resolve\n      });\n    });\n    publish();\n    return prom;\n  };\n  const close = (id, value) => {\n    const prevProps = get(id);\n    map.set(id, { ...prevProps, open: false });\n    if (prevProps.setReturnValue) {\n      prevProps.setReturnValue(value);\n      prevProps.setReturnValue = void 0;\n    }\n    publish();\n    const exitPromise = new Promise((resolve) => {\n      const overlay = get(id);\n      map.set(id, {\n        ...overlay,\n        setExitComplete: resolve\n      });\n    });\n    exitPromises.set(id, exitPromise);\n    return exitPromise;\n  };\n  const remove = (id) => {\n    map.delete(id);\n    exitPromises.delete(id);\n    publish();\n  };\n  const update = (id, props) => {\n    const prevProps = get(id);\n    map.set(id, {\n      ...prevProps,\n      ...omit(props, [\"open\", \"onOpenChange\", \"onExitComplete\"])\n    });\n    publish();\n  };\n  const get = (id) => {\n    const overlay = map.get(id);\n    if (!overlay) {\n      throw new Error(`[chakra-ui] Overlay with id ${id} not found`);\n    }\n    return overlay;\n  };\n  const removeAll = () => {\n    map.clear();\n    exitPromises.clear();\n    publish();\n  };\n  function Viewport() {\n    const overlays = React.useSyncExternalStore(\n      subscribe,\n      getSnapshot,\n      getSnapshot\n    );\n    return /* @__PURE__ */ jsx(Fragment, { children: overlays.map((props, index) => (\n      // @ts-expect-error - TODO: fix this\n      /* @__PURE__ */ jsx(Component, { ...props }, index)\n    )) });\n  }\n  return {\n    Viewport,\n    open,\n    close,\n    update,\n    remove,\n    removeAll,\n    get,\n    getSnapshot,\n    waitForExit\n  };\n}\n\nexport { createOverlay };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}