{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { TreeCollection, filePathToTree } from '@zag-js/collection';\nimport { getByTypeahead, dataAttr, isComposingEvent, getEventTarget, isEditableElement, getEventKey, isModifierKey } from '@zag-js/dom-query';\nimport { first, uniq, addOrRemove, remove, add, isEqual, createSplitProps } from '@zag-js/utils';\nimport { createGuards, createMachine } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\n\n// src/tree-view.anatomy.ts\nvar anatomy = createAnatomy(\"tree-view\").parts(\"root\", \"label\", \"tree\", \"item\", \"itemIndicator\", \"itemText\", \"branch\", \"branchControl\", \"branchTrigger\", \"branchContent\", \"branchText\", \"branchIndicator\", \"branchIndentGuide\");\nvar parts = anatomy.build();\nvar collection = options => {\n  return new TreeCollection(options);\n};\ncollection.empty = () => {\n  return new TreeCollection({\n    rootNode: {\n      children: []\n    }\n  });\n};\nfunction filePathCollection(paths) {\n  return filePathToTree(paths);\n}\n\n// src/tree-view.dom.ts\nvar getRootId = ctx => ctx.ids?.root ?? `tree:${ctx.id}:root`;\nvar getLabelId = ctx => ctx.ids?.label ?? `tree:${ctx.id}:label`;\nvar getNodeId = (ctx, value) => ctx.ids?.node?.(value) ?? `tree:${ctx.id}:node:${value}`;\nvar getTreeId = ctx => ctx.ids?.tree ?? `tree:${ctx.id}:tree`;\nvar focusNode = (ctx, value) => {\n  if (value == null) return;\n  const nodeId = getNodeId(ctx, value);\n  ctx.getById(nodeId)?.focus({\n    preventScroll: true\n  });\n};\n\n// src/tree-view.utils.ts\nfunction skipFn(params) {\n  const {\n    prop,\n    context\n  } = params;\n  return function skip({\n    indexPath\n  }) {\n    const paths = prop(\"collection\").getValuePath(indexPath).slice(0, -1);\n    return paths.some(value => !context.get(\"expandedValue\").includes(value));\n  };\n}\nfunction getVisibleNodes(params) {\n  const {\n    prop\n  } = params;\n  const nodes = [];\n  prop(\"collection\").visit({\n    skip: skipFn(params),\n    onEnter: (node, indexPath) => {\n      nodes.push({\n        node,\n        indexPath\n      });\n    }\n  });\n  return nodes;\n}\n\n// src/tree-view.connect.ts\nfunction connect(service, normalize) {\n  const {\n    context,\n    scope,\n    computed,\n    prop,\n    send\n  } = service;\n  const collection2 = prop(\"collection\");\n  const expandedValue = Array.from(context.get(\"expandedValue\"));\n  const selectedValue = Array.from(context.get(\"selectedValue\"));\n  const isTypingAhead = computed(\"isTypingAhead\");\n  const focusedValue = context.get(\"focusedValue\");\n  function getNodeState(props2) {\n    const {\n      node,\n      indexPath\n    } = props2;\n    const value = collection2.getNodeValue(node);\n    return {\n      value,\n      valuePath: collection2.getValuePath(indexPath),\n      disabled: Boolean(node.disabled),\n      focused: focusedValue == null ? isEqual(indexPath, [0]) : focusedValue === value,\n      selected: selectedValue.includes(value),\n      expanded: expandedValue.includes(value),\n      depth: indexPath.length,\n      isBranch: collection2.isBranchNode(node)\n    };\n  }\n  return {\n    collection: collection2,\n    expandedValue,\n    selectedValue,\n    expand(value) {\n      if (!value) return send({\n        type: \"EXPANDED.ALL\"\n      });\n      const _expandedValue = uniq(expandedValue.concat(...value));\n      send({\n        type: \"EXPANDED.SET\",\n        value: _expandedValue,\n        src: \"expand\"\n      });\n    },\n    collapse(value) {\n      if (!value) return send({\n        type: \"EXPANDED.SET\",\n        value: [],\n        src: \"collapseAll\"\n      });\n      const _expandedValue = uniq(remove(expandedValue, ...value));\n      send({\n        type: \"EXPANDED.SET\",\n        value: _expandedValue,\n        src: \"collapse\"\n      });\n    },\n    deselect(value) {\n      if (!value) return send({\n        type: \"SELECTED.SET\",\n        value: [],\n        src: \"deselectAll\"\n      });\n      const _selectedValue = uniq(remove(selectedValue, ...value));\n      send({\n        type: \"SELECTED.SET\",\n        value: _selectedValue,\n        src: \"deselect\"\n      });\n    },\n    select(value) {\n      if (!value) return send({\n        type: \"SELECTED.ALL\"\n      });\n      const nextValue = [];\n      if (prop(\"selectionMode\") === \"single\") {\n        if (value.length > 0) nextValue.push(value[value.length - 1]);\n      } else {\n        nextValue.push(...selectedValue, ...value);\n      }\n      send({\n        type: \"SELECTED.SET\",\n        value: nextValue,\n        src: \"select\"\n      });\n    },\n    getVisibleNodes() {\n      return getVisibleNodes(service);\n    },\n    focus(value) {\n      focusNode(scope, value);\n    },\n    selectParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _selectedValue = add(selectedValue, collection2.getNodeValue(parentNode));\n      send({\n        type: \"SELECTED.SET\",\n        value: _selectedValue,\n        src: \"select.parent\"\n      });\n    },\n    expandParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _expandedValue = add(expandedValue, collection2.getNodeValue(parentNode));\n      send({\n        type: \"EXPANDED.SET\",\n        value: _expandedValue,\n        src: \"expand.parent\"\n      });\n    },\n    setExpandedValue(value) {\n      const _expandedValue = uniq(value);\n      send({\n        type: \"EXPANDED.SET\",\n        value: _expandedValue\n      });\n    },\n    setSelectedValue(value) {\n      const _selectedValue = uniq(value);\n      send({\n        type: \"SELECTED.SET\",\n        value: _selectedValue\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: getRootId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        id: getLabelId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getTreeProps() {\n      return normalize.element({\n        ...parts.tree.attrs,\n        id: getTreeId(scope),\n        dir: prop(\"dir\"),\n        role: \"tree\",\n        \"aria-label\": \"Tree View\",\n        \"aria-labelledby\": getLabelId(scope),\n        \"aria-multiselectable\": prop(\"selectionMode\") === \"multiple\" || void 0,\n        tabIndex: -1,\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          const target = getEventTarget(event);\n          if (isEditableElement(target)) return;\n          const node = target?.closest(\"[data-part=branch-control], [data-part=item]\");\n          if (!node) return;\n          const nodeId = node.dataset.value;\n          if (nodeId == null) {\n            console.warn(`[zag-js/tree-view] Node id not found for node`, node);\n            return;\n          }\n          const isBranchNode = node.matches(\"[data-part=branch-control]\");\n          const keyMap = {\n            ArrowDown(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.ARROW_DOWN\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            ArrowUp(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.ARROW_UP\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            ArrowLeft(event2) {\n              if (isModifierKey(event2) || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: isBranchNode ? \"BRANCH_NODE.ARROW_LEFT\" : \"NODE.ARROW_LEFT\",\n                id: nodeId\n              });\n            },\n            ArrowRight(event2) {\n              if (!isBranchNode || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"BRANCH_NODE.ARROW_RIGHT\",\n                id: nodeId\n              });\n            },\n            Home(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.HOME\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            End(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({\n                type: \"NODE.END\",\n                id: nodeId,\n                shiftKey: event2.shiftKey\n              });\n            },\n            Space(event2) {\n              if (node.dataset.disabled) return;\n              if (isTypingAhead) {\n                send({\n                  type: \"TREE.TYPEAHEAD\",\n                  key: event2.key\n                });\n              } else {\n                keyMap.Enter?.(event2);\n              }\n            },\n            Enter(event2) {\n              if (node.dataset.disabled) return;\n              const isLink = target?.closest(\"a[href]\");\n              if (!isLink) event2.preventDefault();\n              send({\n                type: isBranchNode ? \"BRANCH_NODE.CLICK\" : \"NODE.CLICK\",\n                id: nodeId,\n                src: \"keyboard\"\n              });\n            },\n            \"*\"(event2) {\n              if (node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"SIBLINGS.EXPAND\",\n                id: nodeId\n              });\n            },\n            a(event2) {\n              if (!event2.metaKey || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({\n                type: \"SELECTED.ALL\",\n                moveFocus: true\n              });\n            }\n          };\n          const key = getEventKey(event, {\n            dir: prop(\"dir\")\n          });\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            return;\n          }\n          if (!isTypingAhead) return;\n          const isValidTypeahead = event.key.length === 1 && !isModifierKey(event);\n          if (!isValidTypeahead) return;\n          send({\n            type: \"TREE.TYPEAHEAD\",\n            key: event.key,\n            id: nodeId\n          });\n          event.preventDefault();\n        }\n      });\n    },\n    getNodeState,\n    getItemProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.item.attrs,\n        id: getNodeId(scope, itemState.value),\n        dir: prop(\"dir\"),\n        \"data-ownedby\": getTreeId(scope),\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": itemState.value,\n        tabIndex: itemState.focused ? 0 : -1,\n        \"data-focus\": dataAttr(itemState.focused),\n        role: \"treeitem\",\n        \"aria-current\": itemState.selected ? \"true\" : void 0,\n        \"aria-selected\": itemState.disabled ? void 0 : itemState.selected,\n        \"data-selected\": dataAttr(itemState.selected),\n        \"aria-disabled\": itemState.disabled,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"aria-level\": itemState.depth,\n        \"data-depth\": itemState.depth,\n        style: {\n          \"--depth\": itemState.depth\n        },\n        onFocus(event) {\n          event.stopPropagation();\n          send({\n            type: \"NODE.FOCUS\",\n            id: itemState.value\n          });\n        },\n        onClick(event) {\n          if (itemState.disabled) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({\n            type: \"NODE.CLICK\",\n            id: itemState.value,\n            shiftKey: event.shiftKey,\n            ctrlKey: isMetaKey\n          });\n          event.stopPropagation();\n          const isLink = event.currentTarget.matches(\"a[href]\");\n          if (!isLink) event.preventDefault();\n        }\n      });\n    },\n    getItemTextProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemText.attrs,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused)\n      });\n    },\n    getItemIndicatorProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused),\n        hidden: !itemState.selected\n      });\n    },\n    getBranchProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branch.attrs,\n        \"data-depth\": nodeState.depth,\n        dir: prop(\"dir\"),\n        \"data-branch\": nodeState.value,\n        role: \"treeitem\",\n        \"data-ownedby\": getTreeId(scope),\n        \"data-value\": nodeState.value,\n        \"aria-level\": nodeState.depth,\n        \"aria-selected\": nodeState.disabled ? void 0 : nodeState.selected,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"aria-expanded\": nodeState.expanded,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"aria-disabled\": nodeState.disabled,\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        style: {\n          \"--depth\": nodeState.depth\n        }\n      });\n    },\n    getBranchIndicatorProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused)\n      });\n    },\n    getBranchTriggerProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchTrigger.attrs,\n        role: \"button\",\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-value\": nodeState.value,\n        onClick(event) {\n          if (nodeState.disabled) return;\n          send({\n            type: \"BRANCH_TOGGLE.CLICK\",\n            id: nodeState.value\n          });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchControlProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchControl.attrs,\n        role: \"button\",\n        id: getNodeId(scope, nodeState.value),\n        dir: prop(\"dir\"),\n        tabIndex: nodeState.focused ? 0 : -1,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-value\": nodeState.value,\n        \"data-depth\": nodeState.depth,\n        onFocus(event) {\n          send({\n            type: \"NODE.FOCUS\",\n            id: nodeState.value\n          });\n          event.stopPropagation();\n        },\n        onClick(event) {\n          if (nodeState.disabled) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({\n            type: \"BRANCH_NODE.CLICK\",\n            id: nodeState.value,\n            shiftKey: event.shiftKey,\n            ctrlKey: isMetaKey\n          });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchTextProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchText.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\"\n      });\n    },\n    getBranchContentProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchContent.attrs,\n        role: \"group\",\n        dir: prop(\"dir\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-depth\": nodeState.depth,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": nodeState.value,\n        hidden: !nodeState.expanded\n      });\n    },\n    getBranchIndentGuideProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndentGuide.attrs,\n        \"data-depth\": nodeState.depth\n      });\n    }\n  };\n}\nvar {\n  and\n} = createGuards();\nvar machine = createMachine({\n  props({\n    props: props2\n  }) {\n    return {\n      selectionMode: \"single\",\n      collection: collection.empty(),\n      typeahead: true,\n      expandOnClick: true,\n      defaultExpandedValue: [],\n      defaultSelectedValue: [],\n      ...props2\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context({\n    prop,\n    bindable,\n    getContext\n  }) {\n    return {\n      expandedValue: bindable(() => ({\n        defaultValue: prop(\"defaultExpandedValue\"),\n        value: prop(\"expandedValue\"),\n        isEqual: isEqual,\n        onChange(value) {\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          prop(\"onExpandedChange\")?.({\n            expandedValue: value,\n            focusedValue\n          });\n        }\n      })),\n      selectedValue: bindable(() => ({\n        defaultValue: prop(\"defaultSelectedValue\"),\n        value: prop(\"selectedValue\"),\n        isEqual: isEqual,\n        onChange(value) {\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          prop(\"onSelectionChange\")?.({\n            selectedValue: value,\n            focusedValue\n          });\n        }\n      })),\n      focusedValue: bindable(() => ({\n        defaultValue: prop(\"focusedValue\"),\n        onChange(value) {\n          prop(\"onFocusChange\")?.({\n            focusedValue: value\n          });\n        }\n      }))\n    };\n  },\n  refs() {\n    return {\n      typeaheadState: {\n        ...getByTypeahead.defaultOptions\n      }\n    };\n  },\n  computed: {\n    isMultipleSelection: ({\n      prop\n    }) => prop(\"selectionMode\") === \"multiple\",\n    isTypingAhead: ({\n      refs\n    }) => refs.get(\"typeaheadState\").keysSoFar.length > 0\n  },\n  on: {\n    \"EXPANDED.SET\": {\n      actions: [\"setExpanded\"]\n    },\n    \"SELECTED.SET\": {\n      actions: [\"setSelected\"]\n    },\n    \"SELECTED.ALL\": [{\n      guard: and(\"isMultipleSelection\", \"moveFocus\"),\n      actions: [\"selectAllNodes\", \"focusTreeLastNode\"]\n    }, {\n      guard: \"isMultipleSelection\",\n      actions: [\"selectAllNodes\"]\n    }],\n    \"EXPANDED.ALL\": {\n      actions: [\"expandAllBranches\"]\n    }\n  },\n  states: {\n    idle: {\n      on: {\n        \"NODE.FOCUS\": {\n          actions: [\"setFocusedNode\"]\n        },\n        \"NODE.ARROW_DOWN\": [{\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"focusTreeNextNode\", \"extendSelectionToNextNode\"]\n        }, {\n          actions: [\"focusTreeNextNode\"]\n        }],\n        \"NODE.ARROW_UP\": [{\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"focusTreePrevNode\", \"extendSelectionToPrevNode\"]\n        }, {\n          actions: [\"focusTreePrevNode\"]\n        }],\n        \"NODE.ARROW_LEFT\": {\n          actions: [\"focusBranchNode\"]\n        },\n        \"BRANCH_NODE.ARROW_LEFT\": [{\n          guard: \"isBranchExpanded\",\n          actions: [\"collapseBranch\"]\n        }, {\n          actions: [\"focusBranchNode\"]\n        }],\n        \"BRANCH_NODE.ARROW_RIGHT\": [{\n          guard: and(\"isBranchFocused\", \"isBranchExpanded\"),\n          actions: [\"focusBranchFirstNode\"]\n        }, {\n          actions: [\"expandBranch\"]\n        }],\n        \"SIBLINGS.EXPAND\": {\n          actions: [\"expandSiblingBranches\"]\n        },\n        \"NODE.HOME\": [{\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"extendSelectionToFirstNode\", \"focusTreeFirstNode\"]\n        }, {\n          actions: [\"focusTreeFirstNode\"]\n        }],\n        \"NODE.END\": [{\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"extendSelectionToLastNode\", \"focusTreeLastNode\"]\n        }, {\n          actions: [\"focusTreeLastNode\"]\n        }],\n        \"NODE.CLICK\": [{\n          guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n          actions: [\"toggleNodeSelection\"]\n        }, {\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"extendSelectionToNode\"]\n        }, {\n          actions: [\"selectNode\"]\n        }],\n        \"BRANCH_NODE.CLICK\": [{\n          guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n          actions: [\"toggleNodeSelection\"]\n        }, {\n          guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n          actions: [\"extendSelectionToNode\"]\n        }, {\n          guard: \"openOnClick\",\n          actions: [\"selectNode\", \"toggleBranchNode\"]\n        }, {\n          actions: [\"selectNode\"]\n        }],\n        \"BRANCH_TOGGLE.CLICK\": {\n          actions: [\"toggleBranchNode\"]\n        },\n        \"TREE.TYPEAHEAD\": {\n          actions: [\"focusMatchedNode\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      isBranchFocused: ({\n        context,\n        event\n      }) => context.get(\"focusedValue\") === event.id,\n      isBranchExpanded: ({\n        context,\n        event\n      }) => context.get(\"expandedValue\").includes(event.id),\n      isShiftKey: ({\n        event\n      }) => event.shiftKey,\n      isCtrlKey: ({\n        event\n      }) => event.ctrlKey,\n      hasSelectedItems: ({\n        context\n      }) => context.get(\"selectedValue\").length > 0,\n      isMultipleSelection: ({\n        prop\n      }) => prop(\"selectionMode\") === \"multiple\",\n      moveFocus: ({\n        event\n      }) => !!event.moveFocus,\n      openOnClick: ({\n        prop\n      }) => !!prop(\"expandOnClick\")\n    },\n    actions: {\n      selectNode({\n        context,\n        event\n      }) {\n        context.set(\"selectedValue\", [event.id]);\n      },\n      setFocusedNode({\n        context,\n        event\n      }) {\n        context.set(\"focusedValue\", event.id);\n      },\n      clearFocusedNode({\n        context\n      }) {\n        context.set(\"focusedValue\", null);\n      },\n      clearSelectedItem({\n        context\n      }) {\n        context.set(\"selectedValue\", []);\n      },\n      toggleBranchNode({\n        context,\n        event\n      }) {\n        context.set(\"expandedValue\", prev => addOrRemove(prev, event.id));\n      },\n      expandBranch({\n        context,\n        event\n      }) {\n        context.set(\"expandedValue\", prev => add(prev, event.id));\n      },\n      collapseBranch({\n        context,\n        event\n      }) {\n        context.set(\"expandedValue\", prev => remove(prev, event.id));\n      },\n      setExpanded({\n        context,\n        event\n      }) {\n        context.set(\"expandedValue\", event.value);\n      },\n      setSelected({\n        context,\n        event\n      }) {\n        context.set(\"selectedValue\", event.value);\n      },\n      focusTreeFirstNode({\n        prop,\n        scope\n      }) {\n        const collection2 = prop(\"collection\");\n        const firstNode = collection2.getFirstNode();\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeLastNode({\n        prop,\n        scope\n      }) {\n        const collection2 = prop(\"collection\");\n        const lastNode = collection2.getLastNode();\n        const lastValue = collection2.getNodeValue(lastNode);\n        focusNode(scope, lastValue);\n      },\n      focusBranchFirstNode({\n        event,\n        prop,\n        scope\n      }) {\n        const collection2 = prop(\"collection\");\n        const branchNode = collection2.findNode(event.id);\n        const firstNode = collection2.getFirstNode(branchNode);\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeNextNode(params) {\n        const {\n          event,\n          prop,\n          scope\n        } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!nextNode) return;\n        const nextValue = collection2.getNodeValue(nextNode);\n        focusNode(scope, nextValue);\n      },\n      focusTreePrevNode(params) {\n        const {\n          event,\n          prop,\n          scope\n        } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!prevNode) return;\n        const prevValue = collection2.getNodeValue(prevNode);\n        focusNode(scope, prevValue);\n      },\n      focusBranchNode({\n        event,\n        prop,\n        scope\n      }) {\n        const collection2 = prop(\"collection\");\n        const parentNode = collection2.getParentNode(event.id);\n        const parentValue = parentNode ? collection2.getNodeValue(parentNode) : void 0;\n        focusNode(scope, parentValue);\n      },\n      selectAllNodes({\n        context,\n        prop\n      }) {\n        context.set(\"selectedValue\", prop(\"collection\").getValues());\n      },\n      focusMatchedNode(params) {\n        const {\n          context,\n          prop,\n          refs,\n          event,\n          scope\n        } = params;\n        const nodes = getVisibleNodes(params);\n        const elements = nodes.map(({\n          node: node2\n        }) => ({\n          textContent: prop(\"collection\").stringifyNode(node2),\n          id: prop(\"collection\").getNodeValue(node2)\n        }));\n        const node = getByTypeahead(elements, {\n          state: refs.get(\"typeaheadState\"),\n          activeId: context.get(\"focusedValue\"),\n          key: event.key\n        });\n        focusNode(scope, node?.id);\n      },\n      toggleNodeSelection({\n        context,\n        event\n      }) {\n        const selectedValue = addOrRemove(context.get(\"selectedValue\"), event.id);\n        context.set(\"selectedValue\", selectedValue);\n      },\n      expandAllBranches({\n        context,\n        prop\n      }) {\n        const nextValue = prop(\"collection\").getBranchValues();\n        context.set(\"expandedValue\", nextValue);\n      },\n      expandSiblingBranches({\n        context,\n        event,\n        prop\n      }) {\n        const collection2 = prop(\"collection\");\n        const indexPath = collection2.getIndexPath(event.id);\n        if (!indexPath) return;\n        const nodes = collection2.getSiblingNodes(indexPath);\n        const values = nodes.map(node => collection2.getNodeValue(node));\n        context.set(\"expandedValue\", uniq(values));\n      },\n      extendSelectionToNode(params) {\n        const {\n          context,\n          event,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const anchorValue = first(context.get(\"selectedValue\")) || collection2.getNodeValue(collection2.getFirstNode());\n        const targetValue = event.id;\n        let values = [anchorValue, targetValue];\n        let hits = 0;\n        const visibleNodes = getVisibleNodes(params);\n        visibleNodes.forEach(({\n          node\n        }) => {\n          const nodeValue = collection2.getNodeValue(node);\n          if (hits === 1) values.push(nodeValue);\n          if (nodeValue === anchorValue || nodeValue === targetValue) hits++;\n        });\n        context.set(\"selectedValue\", uniq(values));\n      },\n      extendSelectionToNextNode(params) {\n        const {\n          context,\n          event,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!nextNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const nextValue = collection2.getNodeValue(nextNode);\n        if (nextValue == null) return;\n        if (values.has(event.id) && values.has(nextValue)) {\n          values.delete(event.id);\n        } else if (!values.has(nextValue)) {\n          values.add(nextValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToPrevNode(params) {\n        const {\n          context,\n          event,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, {\n          skip: skipFn(params)\n        });\n        if (!prevNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const prevValue = collection2.getNodeValue(prevNode);\n        if (prevValue == null) return;\n        if (values.has(event.id) && values.has(prevValue)) {\n          values.delete(event.id);\n        } else if (!values.has(prevValue)) {\n          values.add(prevValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToFirstNode(params) {\n        const {\n          context,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: node => {\n            const nodeValue = collection2.getNodeValue(node);\n            values.push(nodeValue);\n            if (nodeValue === currentSelection) {\n              return \"stop\";\n            }\n          }\n        });\n        context.set(\"selectedValue\", values);\n      },\n      extendSelectionToLastNode(params) {\n        const {\n          context,\n          prop\n        } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        let current = false;\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: node => {\n            const nodeValue = collection2.getNodeValue(node);\n            if (nodeValue === currentSelection) current = true;\n            if (current) values.push(nodeValue);\n          }\n        });\n        context.set(\"selectedValue\", values);\n      }\n    }\n  }\n});\nvar props = createProps()([\"ids\", \"collection\", \"dir\", \"expandedValue\", \"expandOnClick\", \"focusedValue\", \"getRootNode\", \"id\", \"onExpandedChange\", \"onFocusChange\", \"onSelectionChange\", \"selectedValue\", \"selectionMode\", \"typeahead\", \"defaultExpandedValue\", \"defaultSelectedValue\"]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"node\", \"indexPath\"]);\nvar splitItemProps = createSplitProps(itemProps);\nexport { anatomy, collection, connect, filePathCollection, itemProps, machine, props, splitItemProps, splitProps };","map":{"version":3,"names":["createAnatomy","TreeCollection","filePathToTree","getByTypeahead","dataAttr","isComposingEvent","getEventTarget","isEditableElement","getEventKey","isModifierKey","first","uniq","addOrRemove","remove","add","isEqual","createSplitProps","createGuards","createMachine","createProps","anatomy","parts","build","collection","options","empty","rootNode","children","filePathCollection","paths","getRootId","ctx","ids","root","id","getLabelId","label","getNodeId","value","node","getTreeId","tree","focusNode","nodeId","getById","focus","preventScroll","skipFn","params","prop","context","skip","indexPath","getValuePath","slice","some","get","includes","getVisibleNodes","nodes","visit","onEnter","push","connect","service","normalize","scope","computed","send","collection2","expandedValue","Array","from","selectedValue","isTypingAhead","focusedValue","getNodeState","props2","getNodeValue","valuePath","disabled","Boolean","focused","selected","expanded","depth","length","isBranch","isBranchNode","expand","type","_expandedValue","concat","src","collapse","deselect","_selectedValue","select","nextValue","selectParent","parentNode","getParentNode","expandParent","setExpandedValue","setSelectedValue","getRootProps","element","attrs","dir","getLabelProps","getTreeProps","role","tabIndex","onKeyDown","event","defaultPrevented","target","closest","dataset","console","warn","matches","keyMap","ArrowDown","event2","preventDefault","shiftKey","ArrowUp","ArrowLeft","ArrowRight","Home","End","Space","key","Enter","isLink","*","a","metaKey","moveFocus","exec","isValidTypeahead","getItemProps","itemState","item","join","style","onFocus","stopPropagation","onClick","isMetaKey","ctrlKey","currentTarget","getItemTextProps","itemText","getItemIndicatorProps","itemIndicator","hidden","getBranchProps","nodeState","branch","getBranchIndicatorProps","branchIndicator","getBranchTriggerProps","branchTrigger","getBranchControlProps","branchControl","getBranchTextProps","branchText","getBranchContentProps","branchContent","getBranchIndentGuideProps","branchIndentGuide","and","machine","props","selectionMode","typeahead","expandOnClick","defaultExpandedValue","defaultSelectedValue","initialState","bindable","getContext","defaultValue","onChange","refs","typeaheadState","defaultOptions","isMultipleSelection","keysSoFar","on","actions","guard","states","idle","implementations","guards","isBranchFocused","isBranchExpanded","isShiftKey","isCtrlKey","hasSelectedItems","openOnClick","selectNode","set","setFocusedNode","clearFocusedNode","clearSelectedItem","toggleBranchNode","prev","expandBranch","collapseBranch","setExpanded","setSelected","focusTreeFirstNode","firstNode","getFirstNode","firstValue","focusTreeLastNode","lastNode","getLastNode","lastValue","focusBranchFirstNode","branchNode","findNode","focusTreeNextNode","nextNode","getNextNode","focusTreePrevNode","prevNode","getPreviousNode","prevValue","focusBranchNode","parentValue","selectAllNodes","getValues","focusMatchedNode","elements","map","node2","textContent","stringifyNode","state","activeId","toggleNodeSelection","expandAllBranches","getBranchValues","expandSiblingBranches","getIndexPath","getSiblingNodes","values","extendSelectionToNode","anchorValue","targetValue","hits","visibleNodes","forEach","nodeValue","extendSelectionToNextNode","Set","has","delete","extendSelectionToPrevNode","extendSelectionToFirstNode","currentSelection","extendSelectionToLastNode","current","splitProps","itemProps","splitItemProps"],"sources":["C:/Users/tuanl/weekly-todo-frontend/node_modules/@zag-js/tree-view/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\nimport { TreeCollection, filePathToTree } from '@zag-js/collection';\nimport { getByTypeahead, dataAttr, isComposingEvent, getEventTarget, isEditableElement, getEventKey, isModifierKey } from '@zag-js/dom-query';\nimport { first, uniq, addOrRemove, remove, add, isEqual, createSplitProps } from '@zag-js/utils';\nimport { createGuards, createMachine } from '@zag-js/core';\nimport { createProps } from '@zag-js/types';\n\n// src/tree-view.anatomy.ts\nvar anatomy = createAnatomy(\"tree-view\").parts(\n  \"root\",\n  \"label\",\n  \"tree\",\n  \"item\",\n  \"itemIndicator\",\n  \"itemText\",\n  \"branch\",\n  \"branchControl\",\n  \"branchTrigger\",\n  \"branchContent\",\n  \"branchText\",\n  \"branchIndicator\",\n  \"branchIndentGuide\"\n);\nvar parts = anatomy.build();\nvar collection = (options) => {\n  return new TreeCollection(options);\n};\ncollection.empty = () => {\n  return new TreeCollection({ rootNode: { children: [] } });\n};\nfunction filePathCollection(paths) {\n  return filePathToTree(paths);\n}\n\n// src/tree-view.dom.ts\nvar getRootId = (ctx) => ctx.ids?.root ?? `tree:${ctx.id}:root`;\nvar getLabelId = (ctx) => ctx.ids?.label ?? `tree:${ctx.id}:label`;\nvar getNodeId = (ctx, value) => ctx.ids?.node?.(value) ?? `tree:${ctx.id}:node:${value}`;\nvar getTreeId = (ctx) => ctx.ids?.tree ?? `tree:${ctx.id}:tree`;\nvar focusNode = (ctx, value) => {\n  if (value == null) return;\n  const nodeId = getNodeId(ctx, value);\n  ctx.getById(nodeId)?.focus({ preventScroll: true });\n};\n\n// src/tree-view.utils.ts\nfunction skipFn(params) {\n  const { prop, context } = params;\n  return function skip({ indexPath }) {\n    const paths = prop(\"collection\").getValuePath(indexPath).slice(0, -1);\n    return paths.some((value) => !context.get(\"expandedValue\").includes(value));\n  };\n}\nfunction getVisibleNodes(params) {\n  const { prop } = params;\n  const nodes = [];\n  prop(\"collection\").visit({\n    skip: skipFn(params),\n    onEnter: (node, indexPath) => {\n      nodes.push({ node, indexPath });\n    }\n  });\n  return nodes;\n}\n\n// src/tree-view.connect.ts\nfunction connect(service, normalize) {\n  const { context, scope, computed, prop, send } = service;\n  const collection2 = prop(\"collection\");\n  const expandedValue = Array.from(context.get(\"expandedValue\"));\n  const selectedValue = Array.from(context.get(\"selectedValue\"));\n  const isTypingAhead = computed(\"isTypingAhead\");\n  const focusedValue = context.get(\"focusedValue\");\n  function getNodeState(props2) {\n    const { node, indexPath } = props2;\n    const value = collection2.getNodeValue(node);\n    return {\n      value,\n      valuePath: collection2.getValuePath(indexPath),\n      disabled: Boolean(node.disabled),\n      focused: focusedValue == null ? isEqual(indexPath, [0]) : focusedValue === value,\n      selected: selectedValue.includes(value),\n      expanded: expandedValue.includes(value),\n      depth: indexPath.length,\n      isBranch: collection2.isBranchNode(node)\n    };\n  }\n  return {\n    collection: collection2,\n    expandedValue,\n    selectedValue,\n    expand(value) {\n      if (!value) return send({ type: \"EXPANDED.ALL\" });\n      const _expandedValue = uniq(expandedValue.concat(...value));\n      send({ type: \"EXPANDED.SET\", value: _expandedValue, src: \"expand\" });\n    },\n    collapse(value) {\n      if (!value) return send({ type: \"EXPANDED.SET\", value: [], src: \"collapseAll\" });\n      const _expandedValue = uniq(remove(expandedValue, ...value));\n      send({ type: \"EXPANDED.SET\", value: _expandedValue, src: \"collapse\" });\n    },\n    deselect(value) {\n      if (!value) return send({ type: \"SELECTED.SET\", value: [], src: \"deselectAll\" });\n      const _selectedValue = uniq(remove(selectedValue, ...value));\n      send({ type: \"SELECTED.SET\", value: _selectedValue, src: \"deselect\" });\n    },\n    select(value) {\n      if (!value) return send({ type: \"SELECTED.ALL\" });\n      const nextValue = [];\n      if (prop(\"selectionMode\") === \"single\") {\n        if (value.length > 0) nextValue.push(value[value.length - 1]);\n      } else {\n        nextValue.push(...selectedValue, ...value);\n      }\n      send({ type: \"SELECTED.SET\", value: nextValue, src: \"select\" });\n    },\n    getVisibleNodes() {\n      return getVisibleNodes(service);\n    },\n    focus(value) {\n      focusNode(scope, value);\n    },\n    selectParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _selectedValue = add(selectedValue, collection2.getNodeValue(parentNode));\n      send({ type: \"SELECTED.SET\", value: _selectedValue, src: \"select.parent\" });\n    },\n    expandParent(value) {\n      const parentNode = collection2.getParentNode(value);\n      if (!parentNode) return;\n      const _expandedValue = add(expandedValue, collection2.getNodeValue(parentNode));\n      send({ type: \"EXPANDED.SET\", value: _expandedValue, src: \"expand.parent\" });\n    },\n    setExpandedValue(value) {\n      const _expandedValue = uniq(value);\n      send({ type: \"EXPANDED.SET\", value: _expandedValue });\n    },\n    setSelectedValue(value) {\n      const _selectedValue = uniq(value);\n      send({ type: \"SELECTED.SET\", value: _selectedValue });\n    },\n    getRootProps() {\n      return normalize.element({\n        ...parts.root.attrs,\n        id: getRootId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getLabelProps() {\n      return normalize.element({\n        ...parts.label.attrs,\n        id: getLabelId(scope),\n        dir: prop(\"dir\")\n      });\n    },\n    getTreeProps() {\n      return normalize.element({\n        ...parts.tree.attrs,\n        id: getTreeId(scope),\n        dir: prop(\"dir\"),\n        role: \"tree\",\n        \"aria-label\": \"Tree View\",\n        \"aria-labelledby\": getLabelId(scope),\n        \"aria-multiselectable\": prop(\"selectionMode\") === \"multiple\" || void 0,\n        tabIndex: -1,\n        onKeyDown(event) {\n          if (event.defaultPrevented) return;\n          if (isComposingEvent(event)) return;\n          const target = getEventTarget(event);\n          if (isEditableElement(target)) return;\n          const node = target?.closest(\"[data-part=branch-control], [data-part=item]\");\n          if (!node) return;\n          const nodeId = node.dataset.value;\n          if (nodeId == null) {\n            console.warn(`[zag-js/tree-view] Node id not found for node`, node);\n            return;\n          }\n          const isBranchNode = node.matches(\"[data-part=branch-control]\");\n          const keyMap = {\n            ArrowDown(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.ARROW_DOWN\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            ArrowUp(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.ARROW_UP\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            ArrowLeft(event2) {\n              if (isModifierKey(event2) || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: isBranchNode ? \"BRANCH_NODE.ARROW_LEFT\" : \"NODE.ARROW_LEFT\", id: nodeId });\n            },\n            ArrowRight(event2) {\n              if (!isBranchNode || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: \"BRANCH_NODE.ARROW_RIGHT\", id: nodeId });\n            },\n            Home(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.HOME\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            End(event2) {\n              if (isModifierKey(event2)) return;\n              event2.preventDefault();\n              send({ type: \"NODE.END\", id: nodeId, shiftKey: event2.shiftKey });\n            },\n            Space(event2) {\n              if (node.dataset.disabled) return;\n              if (isTypingAhead) {\n                send({ type: \"TREE.TYPEAHEAD\", key: event2.key });\n              } else {\n                keyMap.Enter?.(event2);\n              }\n            },\n            Enter(event2) {\n              if (node.dataset.disabled) return;\n              const isLink = target?.closest(\"a[href]\");\n              if (!isLink) event2.preventDefault();\n              send({ type: isBranchNode ? \"BRANCH_NODE.CLICK\" : \"NODE.CLICK\", id: nodeId, src: \"keyboard\" });\n            },\n            \"*\"(event2) {\n              if (node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: \"SIBLINGS.EXPAND\", id: nodeId });\n            },\n            a(event2) {\n              if (!event2.metaKey || node.dataset.disabled) return;\n              event2.preventDefault();\n              send({ type: \"SELECTED.ALL\", moveFocus: true });\n            }\n          };\n          const key = getEventKey(event, { dir: prop(\"dir\") });\n          const exec = keyMap[key];\n          if (exec) {\n            exec(event);\n            return;\n          }\n          if (!isTypingAhead) return;\n          const isValidTypeahead = event.key.length === 1 && !isModifierKey(event);\n          if (!isValidTypeahead) return;\n          send({ type: \"TREE.TYPEAHEAD\", key: event.key, id: nodeId });\n          event.preventDefault();\n        }\n      });\n    },\n    getNodeState,\n    getItemProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.item.attrs,\n        id: getNodeId(scope, itemState.value),\n        dir: prop(\"dir\"),\n        \"data-ownedby\": getTreeId(scope),\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": itemState.value,\n        tabIndex: itemState.focused ? 0 : -1,\n        \"data-focus\": dataAttr(itemState.focused),\n        role: \"treeitem\",\n        \"aria-current\": itemState.selected ? \"true\" : void 0,\n        \"aria-selected\": itemState.disabled ? void 0 : itemState.selected,\n        \"data-selected\": dataAttr(itemState.selected),\n        \"aria-disabled\": itemState.disabled,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"aria-level\": itemState.depth,\n        \"data-depth\": itemState.depth,\n        style: {\n          \"--depth\": itemState.depth\n        },\n        onFocus(event) {\n          event.stopPropagation();\n          send({ type: \"NODE.FOCUS\", id: itemState.value });\n        },\n        onClick(event) {\n          if (itemState.disabled) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({ type: \"NODE.CLICK\", id: itemState.value, shiftKey: event.shiftKey, ctrlKey: isMetaKey });\n          event.stopPropagation();\n          const isLink = event.currentTarget.matches(\"a[href]\");\n          if (!isLink) event.preventDefault();\n        }\n      });\n    },\n    getItemTextProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemText.attrs,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused)\n      });\n    },\n    getItemIndicatorProps(props2) {\n      const itemState = getNodeState(props2);\n      return normalize.element({\n        ...parts.itemIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(itemState.disabled),\n        \"data-selected\": dataAttr(itemState.selected),\n        \"data-focus\": dataAttr(itemState.focused),\n        hidden: !itemState.selected\n      });\n    },\n    getBranchProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branch.attrs,\n        \"data-depth\": nodeState.depth,\n        dir: prop(\"dir\"),\n        \"data-branch\": nodeState.value,\n        role: \"treeitem\",\n        \"data-ownedby\": getTreeId(scope),\n        \"data-value\": nodeState.value,\n        \"aria-level\": nodeState.depth,\n        \"aria-selected\": nodeState.disabled ? void 0 : nodeState.selected,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"aria-expanded\": nodeState.expanded,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"aria-disabled\": nodeState.disabled,\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        style: {\n          \"--depth\": nodeState.depth\n        }\n      });\n    },\n    getBranchIndicatorProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndicator.attrs,\n        \"aria-hidden\": true,\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused)\n      });\n    },\n    getBranchTriggerProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchTrigger.attrs,\n        role: \"button\",\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-value\": nodeState.value,\n        onClick(event) {\n          if (nodeState.disabled) return;\n          send({ type: \"BRANCH_TOGGLE.CLICK\", id: nodeState.value });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchControlProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchControl.attrs,\n        role: \"button\",\n        id: getNodeId(scope, nodeState.value),\n        dir: prop(\"dir\"),\n        tabIndex: nodeState.focused ? 0 : -1,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-selected\": dataAttr(nodeState.selected),\n        \"data-focus\": dataAttr(nodeState.focused),\n        \"data-value\": nodeState.value,\n        \"data-depth\": nodeState.depth,\n        onFocus(event) {\n          send({ type: \"NODE.FOCUS\", id: nodeState.value });\n          event.stopPropagation();\n        },\n        onClick(event) {\n          if (nodeState.disabled) return;\n          const isMetaKey = event.metaKey || event.ctrlKey;\n          send({ type: \"BRANCH_NODE.CLICK\", id: nodeState.value, shiftKey: event.shiftKey, ctrlKey: isMetaKey });\n          event.stopPropagation();\n        }\n      });\n    },\n    getBranchTextProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchText.attrs,\n        dir: prop(\"dir\"),\n        \"data-disabled\": dataAttr(nodeState.disabled),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\"\n      });\n    },\n    getBranchContentProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchContent.attrs,\n        role: \"group\",\n        dir: prop(\"dir\"),\n        \"data-state\": nodeState.expanded ? \"open\" : \"closed\",\n        \"data-depth\": nodeState.depth,\n        \"data-path\": props2.indexPath.join(\"/\"),\n        \"data-value\": nodeState.value,\n        hidden: !nodeState.expanded\n      });\n    },\n    getBranchIndentGuideProps(props2) {\n      const nodeState = getNodeState(props2);\n      return normalize.element({\n        ...parts.branchIndentGuide.attrs,\n        \"data-depth\": nodeState.depth\n      });\n    }\n  };\n}\nvar { and } = createGuards();\nvar machine = createMachine({\n  props({ props: props2 }) {\n    return {\n      selectionMode: \"single\",\n      collection: collection.empty(),\n      typeahead: true,\n      expandOnClick: true,\n      defaultExpandedValue: [],\n      defaultSelectedValue: [],\n      ...props2\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context({ prop, bindable, getContext }) {\n    return {\n      expandedValue: bindable(() => ({\n        defaultValue: prop(\"defaultExpandedValue\"),\n        value: prop(\"expandedValue\"),\n        isEqual: isEqual,\n        onChange(value) {\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          prop(\"onExpandedChange\")?.({ expandedValue: value, focusedValue });\n        }\n      })),\n      selectedValue: bindable(() => ({\n        defaultValue: prop(\"defaultSelectedValue\"),\n        value: prop(\"selectedValue\"),\n        isEqual: isEqual,\n        onChange(value) {\n          const ctx = getContext();\n          const focusedValue = ctx.get(\"focusedValue\");\n          prop(\"onSelectionChange\")?.({ selectedValue: value, focusedValue });\n        }\n      })),\n      focusedValue: bindable(() => ({\n        defaultValue: prop(\"focusedValue\"),\n        onChange(value) {\n          prop(\"onFocusChange\")?.({ focusedValue: value });\n        }\n      }))\n    };\n  },\n  refs() {\n    return {\n      typeaheadState: { ...getByTypeahead.defaultOptions }\n    };\n  },\n  computed: {\n    isMultipleSelection: ({ prop }) => prop(\"selectionMode\") === \"multiple\",\n    isTypingAhead: ({ refs }) => refs.get(\"typeaheadState\").keysSoFar.length > 0\n  },\n  on: {\n    \"EXPANDED.SET\": {\n      actions: [\"setExpanded\"]\n    },\n    \"SELECTED.SET\": {\n      actions: [\"setSelected\"]\n    },\n    \"SELECTED.ALL\": [\n      {\n        guard: and(\"isMultipleSelection\", \"moveFocus\"),\n        actions: [\"selectAllNodes\", \"focusTreeLastNode\"]\n      },\n      {\n        guard: \"isMultipleSelection\",\n        actions: [\"selectAllNodes\"]\n      }\n    ],\n    \"EXPANDED.ALL\": {\n      actions: [\"expandAllBranches\"]\n    }\n  },\n  states: {\n    idle: {\n      on: {\n        \"NODE.FOCUS\": {\n          actions: [\"setFocusedNode\"]\n        },\n        \"NODE.ARROW_DOWN\": [\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"focusTreeNextNode\", \"extendSelectionToNextNode\"]\n          },\n          {\n            actions: [\"focusTreeNextNode\"]\n          }\n        ],\n        \"NODE.ARROW_UP\": [\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"focusTreePrevNode\", \"extendSelectionToPrevNode\"]\n          },\n          {\n            actions: [\"focusTreePrevNode\"]\n          }\n        ],\n        \"NODE.ARROW_LEFT\": {\n          actions: [\"focusBranchNode\"]\n        },\n        \"BRANCH_NODE.ARROW_LEFT\": [\n          {\n            guard: \"isBranchExpanded\",\n            actions: [\"collapseBranch\"]\n          },\n          {\n            actions: [\"focusBranchNode\"]\n          }\n        ],\n        \"BRANCH_NODE.ARROW_RIGHT\": [\n          {\n            guard: and(\"isBranchFocused\", \"isBranchExpanded\"),\n            actions: [\"focusBranchFirstNode\"]\n          },\n          {\n            actions: [\"expandBranch\"]\n          }\n        ],\n        \"SIBLINGS.EXPAND\": {\n          actions: [\"expandSiblingBranches\"]\n        },\n        \"NODE.HOME\": [\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToFirstNode\", \"focusTreeFirstNode\"]\n          },\n          {\n            actions: [\"focusTreeFirstNode\"]\n          }\n        ],\n        \"NODE.END\": [\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToLastNode\", \"focusTreeLastNode\"]\n          },\n          {\n            actions: [\"focusTreeLastNode\"]\n          }\n        ],\n        \"NODE.CLICK\": [\n          {\n            guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n            actions: [\"toggleNodeSelection\"]\n          },\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToNode\"]\n          },\n          {\n            actions: [\"selectNode\"]\n          }\n        ],\n        \"BRANCH_NODE.CLICK\": [\n          {\n            guard: and(\"isCtrlKey\", \"isMultipleSelection\"),\n            actions: [\"toggleNodeSelection\"]\n          },\n          {\n            guard: and(\"isShiftKey\", \"isMultipleSelection\"),\n            actions: [\"extendSelectionToNode\"]\n          },\n          {\n            guard: \"openOnClick\",\n            actions: [\"selectNode\", \"toggleBranchNode\"]\n          },\n          {\n            actions: [\"selectNode\"]\n          }\n        ],\n        \"BRANCH_TOGGLE.CLICK\": {\n          actions: [\"toggleBranchNode\"]\n        },\n        \"TREE.TYPEAHEAD\": {\n          actions: [\"focusMatchedNode\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    guards: {\n      isBranchFocused: ({ context, event }) => context.get(\"focusedValue\") === event.id,\n      isBranchExpanded: ({ context, event }) => context.get(\"expandedValue\").includes(event.id),\n      isShiftKey: ({ event }) => event.shiftKey,\n      isCtrlKey: ({ event }) => event.ctrlKey,\n      hasSelectedItems: ({ context }) => context.get(\"selectedValue\").length > 0,\n      isMultipleSelection: ({ prop }) => prop(\"selectionMode\") === \"multiple\",\n      moveFocus: ({ event }) => !!event.moveFocus,\n      openOnClick: ({ prop }) => !!prop(\"expandOnClick\")\n    },\n    actions: {\n      selectNode({ context, event }) {\n        context.set(\"selectedValue\", [event.id]);\n      },\n      setFocusedNode({ context, event }) {\n        context.set(\"focusedValue\", event.id);\n      },\n      clearFocusedNode({ context }) {\n        context.set(\"focusedValue\", null);\n      },\n      clearSelectedItem({ context }) {\n        context.set(\"selectedValue\", []);\n      },\n      toggleBranchNode({ context, event }) {\n        context.set(\"expandedValue\", (prev) => addOrRemove(prev, event.id));\n      },\n      expandBranch({ context, event }) {\n        context.set(\"expandedValue\", (prev) => add(prev, event.id));\n      },\n      collapseBranch({ context, event }) {\n        context.set(\"expandedValue\", (prev) => remove(prev, event.id));\n      },\n      setExpanded({ context, event }) {\n        context.set(\"expandedValue\", event.value);\n      },\n      setSelected({ context, event }) {\n        context.set(\"selectedValue\", event.value);\n      },\n      focusTreeFirstNode({ prop, scope }) {\n        const collection2 = prop(\"collection\");\n        const firstNode = collection2.getFirstNode();\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeLastNode({ prop, scope }) {\n        const collection2 = prop(\"collection\");\n        const lastNode = collection2.getLastNode();\n        const lastValue = collection2.getNodeValue(lastNode);\n        focusNode(scope, lastValue);\n      },\n      focusBranchFirstNode({ event, prop, scope }) {\n        const collection2 = prop(\"collection\");\n        const branchNode = collection2.findNode(event.id);\n        const firstNode = collection2.getFirstNode(branchNode);\n        const firstValue = collection2.getNodeValue(firstNode);\n        focusNode(scope, firstValue);\n      },\n      focusTreeNextNode(params) {\n        const { event, prop, scope } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, { skip: skipFn(params) });\n        if (!nextNode) return;\n        const nextValue = collection2.getNodeValue(nextNode);\n        focusNode(scope, nextValue);\n      },\n      focusTreePrevNode(params) {\n        const { event, prop, scope } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, { skip: skipFn(params) });\n        if (!prevNode) return;\n        const prevValue = collection2.getNodeValue(prevNode);\n        focusNode(scope, prevValue);\n      },\n      focusBranchNode({ event, prop, scope }) {\n        const collection2 = prop(\"collection\");\n        const parentNode = collection2.getParentNode(event.id);\n        const parentValue = parentNode ? collection2.getNodeValue(parentNode) : void 0;\n        focusNode(scope, parentValue);\n      },\n      selectAllNodes({ context, prop }) {\n        context.set(\"selectedValue\", prop(\"collection\").getValues());\n      },\n      focusMatchedNode(params) {\n        const { context, prop, refs, event, scope } = params;\n        const nodes = getVisibleNodes(params);\n        const elements = nodes.map(({ node: node2 }) => ({\n          textContent: prop(\"collection\").stringifyNode(node2),\n          id: prop(\"collection\").getNodeValue(node2)\n        }));\n        const node = getByTypeahead(elements, {\n          state: refs.get(\"typeaheadState\"),\n          activeId: context.get(\"focusedValue\"),\n          key: event.key\n        });\n        focusNode(scope, node?.id);\n      },\n      toggleNodeSelection({ context, event }) {\n        const selectedValue = addOrRemove(context.get(\"selectedValue\"), event.id);\n        context.set(\"selectedValue\", selectedValue);\n      },\n      expandAllBranches({ context, prop }) {\n        const nextValue = prop(\"collection\").getBranchValues();\n        context.set(\"expandedValue\", nextValue);\n      },\n      expandSiblingBranches({ context, event, prop }) {\n        const collection2 = prop(\"collection\");\n        const indexPath = collection2.getIndexPath(event.id);\n        if (!indexPath) return;\n        const nodes = collection2.getSiblingNodes(indexPath);\n        const values = nodes.map((node) => collection2.getNodeValue(node));\n        context.set(\"expandedValue\", uniq(values));\n      },\n      extendSelectionToNode(params) {\n        const { context, event, prop } = params;\n        const collection2 = prop(\"collection\");\n        const anchorValue = first(context.get(\"selectedValue\")) || collection2.getNodeValue(collection2.getFirstNode());\n        const targetValue = event.id;\n        let values = [anchorValue, targetValue];\n        let hits = 0;\n        const visibleNodes = getVisibleNodes(params);\n        visibleNodes.forEach(({ node }) => {\n          const nodeValue = collection2.getNodeValue(node);\n          if (hits === 1) values.push(nodeValue);\n          if (nodeValue === anchorValue || nodeValue === targetValue) hits++;\n        });\n        context.set(\"selectedValue\", uniq(values));\n      },\n      extendSelectionToNextNode(params) {\n        const { context, event, prop } = params;\n        const collection2 = prop(\"collection\");\n        const nextNode = collection2.getNextNode(event.id, { skip: skipFn(params) });\n        if (!nextNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const nextValue = collection2.getNodeValue(nextNode);\n        if (nextValue == null) return;\n        if (values.has(event.id) && values.has(nextValue)) {\n          values.delete(event.id);\n        } else if (!values.has(nextValue)) {\n          values.add(nextValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToPrevNode(params) {\n        const { context, event, prop } = params;\n        const collection2 = prop(\"collection\");\n        const prevNode = collection2.getPreviousNode(event.id, { skip: skipFn(params) });\n        if (!prevNode) return;\n        const values = new Set(context.get(\"selectedValue\"));\n        const prevValue = collection2.getNodeValue(prevNode);\n        if (prevValue == null) return;\n        if (values.has(event.id) && values.has(prevValue)) {\n          values.delete(event.id);\n        } else if (!values.has(prevValue)) {\n          values.add(prevValue);\n        }\n        context.set(\"selectedValue\", Array.from(values));\n      },\n      extendSelectionToFirstNode(params) {\n        const { context, prop } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: (node) => {\n            const nodeValue = collection2.getNodeValue(node);\n            values.push(nodeValue);\n            if (nodeValue === currentSelection) {\n              return \"stop\";\n            }\n          }\n        });\n        context.set(\"selectedValue\", values);\n      },\n      extendSelectionToLastNode(params) {\n        const { context, prop } = params;\n        const collection2 = prop(\"collection\");\n        const currentSelection = first(context.get(\"selectedValue\"));\n        const values = [];\n        let current = false;\n        collection2.visit({\n          skip: skipFn(params),\n          onEnter: (node) => {\n            const nodeValue = collection2.getNodeValue(node);\n            if (nodeValue === currentSelection) current = true;\n            if (current) values.push(nodeValue);\n          }\n        });\n        context.set(\"selectedValue\", values);\n      }\n    }\n  }\n});\nvar props = createProps()([\n  \"ids\",\n  \"collection\",\n  \"dir\",\n  \"expandedValue\",\n  \"expandOnClick\",\n  \"focusedValue\",\n  \"getRootNode\",\n  \"id\",\n  \"onExpandedChange\",\n  \"onFocusChange\",\n  \"onSelectionChange\",\n  \"selectedValue\",\n  \"selectionMode\",\n  \"typeahead\",\n  \"defaultExpandedValue\",\n  \"defaultSelectedValue\"\n]);\nvar splitProps = createSplitProps(props);\nvar itemProps = createProps()([\"node\", \"indexPath\"]);\nvar splitItemProps = createSplitProps(itemProps);\n\nexport { anatomy, collection, connect, filePathCollection, itemProps, machine, props, splitItemProps, splitProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}