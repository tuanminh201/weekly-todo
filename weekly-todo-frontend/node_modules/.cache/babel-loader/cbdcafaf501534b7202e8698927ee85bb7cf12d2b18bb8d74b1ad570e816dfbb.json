{"ast":null,"code":"import { createAnatomy } from '@zag-js/anatomy';\nimport { getDataUrl } from '@zag-js/dom-query';\nimport { createMachine, memo } from '@zag-js/core';\nimport { encode } from 'uqr';\nimport { createProps } from '@zag-js/types';\nimport { createSplitProps } from '@zag-js/utils';\n\n// src/qr-code.anatomy.ts\nvar anatomy = createAnatomy(\"qr-code\").parts(\"root\", \"frame\", \"pattern\", \"overlay\", \"downloadTrigger\");\nvar parts = anatomy.build();\n\n// src/qr-code.dom.ts\nvar getRootId = scope => scope.ids?.root ?? `qrcode:${scope.id}:root`;\nvar getFrameId = scope => scope.ids?.frame ?? `qrcode:${scope.id}:frame`;\nvar getFrameEl = scope => scope.getById(getFrameId(scope));\n\n// src/qr-code.connect.ts\nfunction connect(service, normalize) {\n  const {\n    context,\n    computed,\n    send,\n    scope,\n    prop\n  } = service;\n  const encoded = computed(\"encoded\");\n  const pixelSize = prop(\"pixelSize\");\n  const height = encoded.size * pixelSize;\n  const width = encoded.size * pixelSize;\n  const paths = [];\n  for (let row = 0; row < encoded.size; row++) {\n    for (let col = 0; col < encoded.size; col++) {\n      const x = col * pixelSize;\n      const y = row * pixelSize;\n      if (encoded.data[row][col]) {\n        paths.push(`M${x},${y}h${pixelSize}v${pixelSize}h-${pixelSize}z`);\n      }\n    }\n  }\n  return {\n    value: context.get(\"value\"),\n    setValue(value) {\n      send({\n        type: \"VALUE.SET\",\n        value\n      });\n    },\n    getDataUrl(type, quality) {\n      const svgEl = getFrameEl(scope);\n      return getDataUrl(svgEl, {\n        type,\n        quality\n      });\n    },\n    getRootProps() {\n      return normalize.element({\n        id: getRootId(scope),\n        ...parts.root.attrs,\n        style: {\n          \"--qrcode-pixel-size\": `${pixelSize}px`,\n          \"--qrcode-width\": `${width}px`,\n          \"--qrcode-height\": `${height}px`,\n          position: \"relative\"\n        }\n      });\n    },\n    getFrameProps() {\n      return normalize.svg({\n        id: getFrameId(scope),\n        ...parts.frame.attrs,\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: `0 0 ${width} ${height}`\n      });\n    },\n    getPatternProps() {\n      return normalize.path({\n        d: paths.join(\"\"),\n        ...parts.pattern.attrs\n      });\n    },\n    getOverlayProps() {\n      return normalize.element({\n        ...parts.overlay.attrs,\n        style: {\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          translate: \"-50% -50%\"\n        }\n      });\n    },\n    getDownloadTriggerProps(props2) {\n      return normalize.button({\n        type: \"button\",\n        ...parts.downloadTrigger.attrs,\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          send({\n            type: \"DOWNLOAD_TRIGGER.CLICK\",\n            ...props2\n          });\n        }\n      });\n    }\n  };\n}\nvar machine = createMachine({\n  props({\n    props: props2\n  }) {\n    return {\n      defaultValue: \"\",\n      pixelSize: 10,\n      ...props2\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context({\n    prop,\n    bindable\n  }) {\n    return {\n      value: bindable(() => ({\n        value: prop(\"value\"),\n        defaultValue: prop(\"defaultValue\"),\n        onChange(value) {\n          prop(\"onValueChange\")?.({\n            value\n          });\n        }\n      }))\n    };\n  },\n  computed: {\n    encoded: memo(({\n      context,\n      prop\n    }) => [context.get(\"value\"), prop(\"encoding\")], (value, encoding) => encode(value, encoding))\n  },\n  states: {\n    idle: {\n      on: {\n        \"VALUE.SET\": {\n          actions: [\"setValue\"]\n        },\n        \"DOWNLOAD_TRIGGER.CLICK\": {\n          actions: [\"downloadQrCode\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    actions: {\n      setValue({\n        context,\n        event\n      }) {\n        context.set(\"value\", event.value);\n      },\n      downloadQrCode({\n        event,\n        scope\n      }) {\n        const {\n          mimeType,\n          quality,\n          fileName\n        } = event;\n        const svgEl = getFrameEl(scope);\n        const doc = scope.getDoc();\n        getDataUrl(svgEl, {\n          type: mimeType,\n          quality\n        }).then(dataUri => {\n          const a = doc.createElement(\"a\");\n          a.href = dataUri;\n          a.rel = \"noopener\";\n          a.download = fileName;\n          a.click();\n          setTimeout(() => {\n            a.remove();\n          }, 0);\n        });\n      }\n    }\n  }\n});\nvar props = createProps()([\"ids\", \"defaultValue\", \"value\", \"id\", \"encoding\", \"dir\", \"getRootNode\", \"onValueChange\", \"pixelSize\"]);\nvar splitProps = createSplitProps(props);\nexport { anatomy, connect, machine, props, splitProps };","map":{"version":3,"names":["createAnatomy","getDataUrl","createMachine","memo","encode","createProps","createSplitProps","anatomy","parts","build","getRootId","scope","ids","root","id","getFrameId","frame","getFrameEl","getById","connect","service","normalize","context","computed","send","prop","encoded","pixelSize","height","size","width","paths","row","col","x","y","data","push","value","get","setValue","type","quality","svgEl","getRootProps","element","attrs","style","position","getFrameProps","svg","xmlns","viewBox","getPatternProps","path","d","join","pattern","getOverlayProps","overlay","top","left","translate","getDownloadTriggerProps","props2","button","downloadTrigger","onClick","event","defaultPrevented","machine","props","defaultValue","initialState","bindable","onChange","encoding","states","idle","on","actions","implementations","set","downloadQrCode","mimeType","fileName","doc","getDoc","then","dataUri","a","createElement","href","rel","download","click","setTimeout","remove","splitProps"],"sources":["C:/Users/tuanl/weekly-todo-frontend/node_modules/@chakra-ui/react/node_modules/@zag-js/qr-code/dist/index.mjs"],"sourcesContent":["import { createAnatomy } from '@zag-js/anatomy';\nimport { getDataUrl } from '@zag-js/dom-query';\nimport { createMachine, memo } from '@zag-js/core';\nimport { encode } from 'uqr';\nimport { createProps } from '@zag-js/types';\nimport { createSplitProps } from '@zag-js/utils';\n\n// src/qr-code.anatomy.ts\nvar anatomy = createAnatomy(\"qr-code\").parts(\"root\", \"frame\", \"pattern\", \"overlay\", \"downloadTrigger\");\nvar parts = anatomy.build();\n\n// src/qr-code.dom.ts\nvar getRootId = (scope) => scope.ids?.root ?? `qrcode:${scope.id}:root`;\nvar getFrameId = (scope) => scope.ids?.frame ?? `qrcode:${scope.id}:frame`;\nvar getFrameEl = (scope) => scope.getById(getFrameId(scope));\n\n// src/qr-code.connect.ts\nfunction connect(service, normalize) {\n  const { context, computed, send, scope, prop } = service;\n  const encoded = computed(\"encoded\");\n  const pixelSize = prop(\"pixelSize\");\n  const height = encoded.size * pixelSize;\n  const width = encoded.size * pixelSize;\n  const paths = [];\n  for (let row = 0; row < encoded.size; row++) {\n    for (let col = 0; col < encoded.size; col++) {\n      const x = col * pixelSize;\n      const y = row * pixelSize;\n      if (encoded.data[row][col]) {\n        paths.push(`M${x},${y}h${pixelSize}v${pixelSize}h-${pixelSize}z`);\n      }\n    }\n  }\n  return {\n    value: context.get(\"value\"),\n    setValue(value) {\n      send({ type: \"VALUE.SET\", value });\n    },\n    getDataUrl(type, quality) {\n      const svgEl = getFrameEl(scope);\n      return getDataUrl(svgEl, { type, quality });\n    },\n    getRootProps() {\n      return normalize.element({\n        id: getRootId(scope),\n        ...parts.root.attrs,\n        style: {\n          \"--qrcode-pixel-size\": `${pixelSize}px`,\n          \"--qrcode-width\": `${width}px`,\n          \"--qrcode-height\": `${height}px`,\n          position: \"relative\"\n        }\n      });\n    },\n    getFrameProps() {\n      return normalize.svg({\n        id: getFrameId(scope),\n        ...parts.frame.attrs,\n        xmlns: \"http://www.w3.org/2000/svg\",\n        viewBox: `0 0 ${width} ${height}`\n      });\n    },\n    getPatternProps() {\n      return normalize.path({\n        d: paths.join(\"\"),\n        ...parts.pattern.attrs\n      });\n    },\n    getOverlayProps() {\n      return normalize.element({\n        ...parts.overlay.attrs,\n        style: {\n          position: \"absolute\",\n          top: \"50%\",\n          left: \"50%\",\n          translate: \"-50% -50%\"\n        }\n      });\n    },\n    getDownloadTriggerProps(props2) {\n      return normalize.button({\n        type: \"button\",\n        ...parts.downloadTrigger.attrs,\n        onClick(event) {\n          if (event.defaultPrevented) return;\n          send({ type: \"DOWNLOAD_TRIGGER.CLICK\", ...props2 });\n        }\n      });\n    }\n  };\n}\nvar machine = createMachine({\n  props({ props: props2 }) {\n    return {\n      defaultValue: \"\",\n      pixelSize: 10,\n      ...props2\n    };\n  },\n  initialState() {\n    return \"idle\";\n  },\n  context({ prop, bindable }) {\n    return {\n      value: bindable(() => ({\n        value: prop(\"value\"),\n        defaultValue: prop(\"defaultValue\"),\n        onChange(value) {\n          prop(\"onValueChange\")?.({ value });\n        }\n      }))\n    };\n  },\n  computed: {\n    encoded: memo(\n      ({ context, prop }) => [context.get(\"value\"), prop(\"encoding\")],\n      (value, encoding) => encode(value, encoding)\n    )\n  },\n  states: {\n    idle: {\n      on: {\n        \"VALUE.SET\": {\n          actions: [\"setValue\"]\n        },\n        \"DOWNLOAD_TRIGGER.CLICK\": {\n          actions: [\"downloadQrCode\"]\n        }\n      }\n    }\n  },\n  implementations: {\n    actions: {\n      setValue({ context, event }) {\n        context.set(\"value\", event.value);\n      },\n      downloadQrCode({ event, scope }) {\n        const { mimeType, quality, fileName } = event;\n        const svgEl = getFrameEl(scope);\n        const doc = scope.getDoc();\n        getDataUrl(svgEl, { type: mimeType, quality }).then((dataUri) => {\n          const a = doc.createElement(\"a\");\n          a.href = dataUri;\n          a.rel = \"noopener\";\n          a.download = fileName;\n          a.click();\n          setTimeout(() => {\n            a.remove();\n          }, 0);\n        });\n      }\n    }\n  }\n});\nvar props = createProps()([\n  \"ids\",\n  \"defaultValue\",\n  \"value\",\n  \"id\",\n  \"encoding\",\n  \"dir\",\n  \"getRootNode\",\n  \"onValueChange\",\n  \"pixelSize\"\n]);\nvar splitProps = createSplitProps(props);\n\nexport { anatomy, connect, machine, props, splitProps };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}