{"ast":null,"code":"'use client';\n\nimport * as collapsible from '@zag-js/collapsible';\nimport { useMachine, normalizeProps } from '@zag-js/react';\nimport { useId, useRef } from 'react';\nimport { useEnvironmentContext } from '../../providers/environment/use-environment-context.js';\nimport { useLocaleContext } from '../../providers/locale/use-locale-context.js';\nconst useCollapsible = (props = {}) => {\n  const {\n    lazyMount,\n    unmountOnExit,\n    ...collapsibleProps\n  } = props;\n  const id = useId();\n  const wasVisible = useRef(false);\n  const {\n    dir\n  } = useLocaleContext();\n  const {\n    getRootNode\n  } = useEnvironmentContext();\n  const machineProps = {\n    id,\n    dir,\n    getRootNode,\n    ...collapsibleProps\n  };\n  const service = useMachine(collapsible.machine, machineProps);\n  const api = collapsible.connect(service, normalizeProps);\n  if (api.visible) {\n    wasVisible.current = true;\n  }\n  const isUnmounted = !api.visible && !wasVisible.current && lazyMount || unmountOnExit && !api.visible && wasVisible.current;\n  return {\n    ...api,\n    isUnmounted\n  };\n};\nexport { useCollapsible };","map":{"version":3,"names":["collapsible","useMachine","normalizeProps","useId","useRef","useEnvironmentContext","useLocaleContext","useCollapsible","props","lazyMount","unmountOnExit","collapsibleProps","id","wasVisible","dir","getRootNode","machineProps","service","machine","api","connect","visible","current","isUnmounted"],"sources":["C:/Users/tuanl/weekly-todo-frontend/node_modules/@ark-ui/react/dist/components/collapsible/use-collapsible.js"],"sourcesContent":["'use client';\nimport * as collapsible from '@zag-js/collapsible';\nimport { useMachine, normalizeProps } from '@zag-js/react';\nimport { useId, useRef } from 'react';\nimport { useEnvironmentContext } from '../../providers/environment/use-environment-context.js';\nimport { useLocaleContext } from '../../providers/locale/use-locale-context.js';\n\nconst useCollapsible = (props = {}) => {\n  const { lazyMount, unmountOnExit, ...collapsibleProps } = props;\n  const id = useId();\n  const wasVisible = useRef(false);\n  const { dir } = useLocaleContext();\n  const { getRootNode } = useEnvironmentContext();\n  const machineProps = {\n    id,\n    dir,\n    getRootNode,\n    ...collapsibleProps\n  };\n  const service = useMachine(collapsible.machine, machineProps);\n  const api = collapsible.connect(service, normalizeProps);\n  if (api.visible) {\n    wasVisible.current = true;\n  }\n  const isUnmounted = !api.visible && !wasVisible.current && lazyMount || unmountOnExit && !api.visible && wasVisible.current;\n  return { ...api, isUnmounted };\n};\n\nexport { useCollapsible };\n"],"mappings":"AAAA,YAAY;;AACZ,OAAO,KAAKA,WAAW,MAAM,qBAAqB;AAClD,SAASC,UAAU,EAAEC,cAAc,QAAQ,eAAe;AAC1D,SAASC,KAAK,EAAEC,MAAM,QAAQ,OAAO;AACrC,SAASC,qBAAqB,QAAQ,wDAAwD;AAC9F,SAASC,gBAAgB,QAAQ,8CAA8C;AAE/E,MAAMC,cAAc,GAAGA,CAACC,KAAK,GAAG,CAAC,CAAC,KAAK;EACrC,MAAM;IAAEC,SAAS;IAAEC,aAAa;IAAE,GAAGC;EAAiB,CAAC,GAAGH,KAAK;EAC/D,MAAMI,EAAE,GAAGT,KAAK,CAAC,CAAC;EAClB,MAAMU,UAAU,GAAGT,MAAM,CAAC,KAAK,CAAC;EAChC,MAAM;IAAEU;EAAI,CAAC,GAAGR,gBAAgB,CAAC,CAAC;EAClC,MAAM;IAAES;EAAY,CAAC,GAAGV,qBAAqB,CAAC,CAAC;EAC/C,MAAMW,YAAY,GAAG;IACnBJ,EAAE;IACFE,GAAG;IACHC,WAAW;IACX,GAAGJ;EACL,CAAC;EACD,MAAMM,OAAO,GAAGhB,UAAU,CAACD,WAAW,CAACkB,OAAO,EAAEF,YAAY,CAAC;EAC7D,MAAMG,GAAG,GAAGnB,WAAW,CAACoB,OAAO,CAACH,OAAO,EAAEf,cAAc,CAAC;EACxD,IAAIiB,GAAG,CAACE,OAAO,EAAE;IACfR,UAAU,CAACS,OAAO,GAAG,IAAI;EAC3B;EACA,MAAMC,WAAW,GAAG,CAACJ,GAAG,CAACE,OAAO,IAAI,CAACR,UAAU,CAACS,OAAO,IAAIb,SAAS,IAAIC,aAAa,IAAI,CAACS,GAAG,CAACE,OAAO,IAAIR,UAAU,CAACS,OAAO;EAC3H,OAAO;IAAE,GAAGH,GAAG;IAAEI;EAAY,CAAC;AAChC,CAAC;AAED,SAAShB,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}